/*
 * Cielo24
 *
 * The cielo24 Web Services Platform API allows developers to easily integrate transcription, captioning and keyword extraction into their applications without having to use a manual web portal.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: devs@cielo24.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = cielo24.Client.OpenAPIDateConverter;

namespace cielo24.Model
{
    /// <summary>
    /// NewJobBody
    /// </summary>
    [DataContract(Name = "NewJobBody")]
    public partial class NewJobBody : IEquatable<NewJobBody>, IValidatableObject
    {
        /// <summary>
        /// Allows creating multiple jobs with the same external_id
        /// </summary>
        /// <value>Allows creating multiple jobs with the same external_id</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum IsDuplicateEnum
        {
            /// <summary>
            /// Enum True for value: true
            /// </summary>
            [EnumMember(Value = "true")]
            True = 1,

            /// <summary>
            /// Enum False for value: false
            /// </summary>
            [EnumMember(Value = "false")]
            False = 2

        }


        /// <summary>
        /// Allows creating multiple jobs with the same external_id
        /// </summary>
        /// <value>Allows creating multiple jobs with the same external_id</value>
        [DataMember(Name = "is_duplicate", EmitDefaultValue = false)]
        public IsDuplicateEnum? IsDuplicate { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="NewJobBody" /> class.
        /// </summary>
        /// <param name="jobName">A human readable identifier for the job.</param>
        /// <param name="language">Native job language.</param>
        /// <param name="externalId">An identifier you want to associate with this job.</param>
        /// <param name="username">Create the job in specified sub-account.</param>
        /// <param name="requestor">An requestor you want to associate with this job.</param>
        /// <param name="reference">An reference you want to associate with this job.</param>
        /// <param name="expectedSpeakers">Amount of speakers that the video will have.</param>
        /// <param name="isDuplicate">Allows creating multiple jobs with the same external_id (default to IsDuplicateEnum.False).</param>
        public NewJobBody(string jobName = default(string), string language = default(string), string externalId = default(string), string username = default(string), string requestor = default(string), string reference = default(string), int expectedSpeakers = default(int), IsDuplicateEnum? isDuplicate = IsDuplicateEnum.False)
        {
            this.JobName = jobName;
            this.Language = language;
            this.ExternalId = externalId;
            this.Username = username;
            this.Requestor = requestor;
            this.Reference = reference;
            this.ExpectedSpeakers = expectedSpeakers;
            this.IsDuplicate = isDuplicate;
        }

        /// <summary>
        /// A human readable identifier for the job
        /// </summary>
        /// <value>A human readable identifier for the job</value>
        [DataMember(Name = "job_name", EmitDefaultValue = false)]
        public string JobName { get; set; }

        /// <summary>
        /// Native job language
        /// </summary>
        /// <value>Native job language</value>
        [DataMember(Name = "language", EmitDefaultValue = false)]
        public string Language { get; set; }

        /// <summary>
        /// An identifier you want to associate with this job
        /// </summary>
        /// <value>An identifier you want to associate with this job</value>
        [DataMember(Name = "external_id", EmitDefaultValue = false)]
        public string ExternalId { get; set; }

        /// <summary>
        /// Create the job in specified sub-account
        /// </summary>
        /// <value>Create the job in specified sub-account</value>
        [DataMember(Name = "username", EmitDefaultValue = false)]
        public string Username { get; set; }

        /// <summary>
        /// An requestor you want to associate with this job
        /// </summary>
        /// <value>An requestor you want to associate with this job</value>
        [DataMember(Name = "requestor", EmitDefaultValue = false)]
        public string Requestor { get; set; }

        /// <summary>
        /// An reference you want to associate with this job
        /// </summary>
        /// <value>An reference you want to associate with this job</value>
        [DataMember(Name = "reference", EmitDefaultValue = false)]
        public string Reference { get; set; }

        /// <summary>
        /// Amount of speakers that the video will have
        /// </summary>
        /// <value>Amount of speakers that the video will have</value>
        [DataMember(Name = "expected_speakers", EmitDefaultValue = false)]
        public int ExpectedSpeakers { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class NewJobBody {\n");
            sb.Append("  JobName: ").Append(JobName).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  ExternalId: ").Append(ExternalId).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  Requestor: ").Append(Requestor).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  ExpectedSpeakers: ").Append(ExpectedSpeakers).Append("\n");
            sb.Append("  IsDuplicate: ").Append(IsDuplicate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NewJobBody);
        }

        /// <summary>
        /// Returns true if NewJobBody instances are equal
        /// </summary>
        /// <param name="input">Instance of NewJobBody to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NewJobBody input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.JobName == input.JobName ||
                    (this.JobName != null &&
                    this.JobName.Equals(input.JobName))
                ) && 
                (
                    this.Language == input.Language ||
                    (this.Language != null &&
                    this.Language.Equals(input.Language))
                ) && 
                (
                    this.ExternalId == input.ExternalId ||
                    (this.ExternalId != null &&
                    this.ExternalId.Equals(input.ExternalId))
                ) && 
                (
                    this.Username == input.Username ||
                    (this.Username != null &&
                    this.Username.Equals(input.Username))
                ) && 
                (
                    this.Requestor == input.Requestor ||
                    (this.Requestor != null &&
                    this.Requestor.Equals(input.Requestor))
                ) && 
                (
                    this.Reference == input.Reference ||
                    (this.Reference != null &&
                    this.Reference.Equals(input.Reference))
                ) && 
                (
                    this.ExpectedSpeakers == input.ExpectedSpeakers ||
                    this.ExpectedSpeakers.Equals(input.ExpectedSpeakers)
                ) && 
                (
                    this.IsDuplicate == input.IsDuplicate ||
                    this.IsDuplicate.Equals(input.IsDuplicate)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.JobName != null)
                {
                    hashCode = (hashCode * 59) + this.JobName.GetHashCode();
                }
                if (this.Language != null)
                {
                    hashCode = (hashCode * 59) + this.Language.GetHashCode();
                }
                if (this.ExternalId != null)
                {
                    hashCode = (hashCode * 59) + this.ExternalId.GetHashCode();
                }
                if (this.Username != null)
                {
                    hashCode = (hashCode * 59) + this.Username.GetHashCode();
                }
                if (this.Requestor != null)
                {
                    hashCode = (hashCode * 59) + this.Requestor.GetHashCode();
                }
                if (this.Reference != null)
                {
                    hashCode = (hashCode * 59) + this.Reference.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ExpectedSpeakers.GetHashCode();
                hashCode = (hashCode * 59) + this.IsDuplicate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
