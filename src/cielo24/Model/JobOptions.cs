/*
 * Cielo24
 *
 * The cielo24 Web Services Platform API allows developers to easily integrate transcription, captioning and keyword extraction into their applications without having to use a manual web portal.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: devs@cielo24.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = cielo24.Client.OpenAPIDateConverter;

namespace cielo24.Model
{
    /// <summary>
    /// JobOptions
    /// </summary>
    [DataContract(Name = "JobOptions")]
    public partial class JobOptions : IEquatable<JobOptions>, IValidatableObject
    {
        /// <summary>
        /// Defines CustomerApprovalSteps
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CustomerApprovalStepsEnum
        {
            /// <summary>
            /// Enum TRANSLATION for value: TRANSLATION
            /// </summary>
            [EnumMember(Value = "TRANSLATION")]
            TRANSLATION = 1,

            /// <summary>
            /// Enum RETURN for value: RETURN
            /// </summary>
            [EnumMember(Value = "RETURN")]
            RETURN = 2

        }



        /// <summary>
        /// Requires your approval of a job at specified points in the workflow. When the job is ready for approval you will be emailed a link that will take you to a web based tool you can use to view, edit and approve the job. You may request approval at two points in the workflow: before translation and before the job is returned.
        /// </summary>
        /// <value>Requires your approval of a job at specified points in the workflow. When the job is ready for approval you will be emailed a link that will take you to a web based tool you can use to view, edit and approve the job. You may request approval at two points in the workflow: before translation and before the job is returned.</value>
        [DataMember(Name = "customer_approval_steps", EmitDefaultValue = false)]
        public List<CustomerApprovalStepsEnum> CustomerApprovalSteps { get; set; }
        /// <summary>
        /// Determines which web based tool to use for viewing, editing and approving jobs.
        /// </summary>
        /// <value>Determines which web based tool to use for viewing, editing and approving jobs.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CustomerApprovalToolEnum
        {
            /// <summary>
            /// Enum AMARA for value: AMARA
            /// </summary>
            [EnumMember(Value = "AMARA")]
            AMARA = 1,

            /// <summary>
            /// Enum CIELO24 for value: CIELO24
            /// </summary>
            [EnumMember(Value = "CIELO24")]
            CIELO24 = 2

        }


        /// <summary>
        /// Determines which web based tool to use for viewing, editing and approving jobs.
        /// </summary>
        /// <value>Determines which web based tool to use for viewing, editing and approving jobs.</value>
        [DataMember(Name = "customer_approval_tool", EmitDefaultValue = false)]
        public CustomerApprovalToolEnum? CustomerApprovalTool { get; set; }
        /// <summary>
        /// Requests that speaker names be identified.
        /// </summary>
        /// <value>Requests that speaker names be identified.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SpeakerIdEnum
        {
            /// <summary>
            /// Enum True for value: true
            /// </summary>
            [EnumMember(Value = "true")]
            True = 1,

            /// <summary>
            /// Enum False for value: false
            /// </summary>
            [EnumMember(Value = "false")]
            False = 2

        }


        /// <summary>
        /// Requests that speaker names be identified.
        /// </summary>
        /// <value>Requests that speaker names be identified.</value>
        [DataMember(Name = "speaker_id", EmitDefaultValue = false)]
        public SpeakerIdEnum? SpeakerId { get; set; }
        /// <summary>
        /// Requests that all noises and sounds be identified.
        /// </summary>
        /// <value>Requests that all noises and sounds be identified.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AudioDescriptionEnum
        {
            /// <summary>
            /// Enum True for value: true
            /// </summary>
            [EnumMember(Value = "true")]
            True = 1,

            /// <summary>
            /// Enum False for value: false
            /// </summary>
            [EnumMember(Value = "false")]
            False = 2

        }


        /// <summary>
        /// Requests that all noises and sounds be identified.
        /// </summary>
        /// <value>Requests that all noises and sounds be identified.</value>
        [DataMember(Name = "audio_description", EmitDefaultValue = false)]
        public AudioDescriptionEnum? AudioDescription { get; set; }
        /// <summary>
        /// Requests that any text that appears in the media be added to the transcription.
        /// </summary>
        /// <value>Requests that any text that appears in the media be added to the transcription.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OnScreenTextEnum
        {
            /// <summary>
            /// Enum True for value: true
            /// </summary>
            [EnumMember(Value = "true")]
            True = 1,

            /// <summary>
            /// Enum False for value: false
            /// </summary>
            [EnumMember(Value = "false")]
            False = 2

        }


        /// <summary>
        /// Requests that any text that appears in the media be added to the transcription.
        /// </summary>
        /// <value>Requests that any text that appears in the media be added to the transcription.</value>
        [DataMember(Name = "on_screen_text", EmitDefaultValue = false)]
        public OnScreenTextEnum? OnScreenText { get; set; }
        /// <summary>
        /// Requests that lyrics to songs be transcribed instead of labeled [MUSIC].
        /// </summary>
        /// <value>Requests that lyrics to songs be transcribed instead of labeled [MUSIC].</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MusicLyricsEnum
        {
            /// <summary>
            /// Enum True for value: true
            /// </summary>
            [EnumMember(Value = "true")]
            True = 1,

            /// <summary>
            /// Enum False for value: false
            /// </summary>
            [EnumMember(Value = "false")]
            False = 2

        }


        /// <summary>
        /// Requests that lyrics to songs be transcribed instead of labeled [MUSIC].
        /// </summary>
        /// <value>Requests that lyrics to songs be transcribed instead of labeled [MUSIC].</value>
        [DataMember(Name = "music_lyrics", EmitDefaultValue = false)]
        public MusicLyricsEnum? MusicLyrics { get; set; }
        /// <summary>
        /// Requests that transcribers follow submitted instruction set.
        /// </summary>
        /// <value>Requests that transcribers follow submitted instruction set.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CustomSpecialHandlingEnum
        {
            /// <summary>
            /// Enum True for value: true
            /// </summary>
            [EnumMember(Value = "true")]
            True = 1,

            /// <summary>
            /// Enum False for value: false
            /// </summary>
            [EnumMember(Value = "false")]
            False = 2

        }


        /// <summary>
        /// Requests that transcribers follow submitted instruction set.
        /// </summary>
        /// <value>Requests that transcribers follow submitted instruction set.</value>
        [DataMember(Name = "custom_special_handling", EmitDefaultValue = false)]
        public CustomSpecialHandlingEnum? CustomSpecialHandling { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="JobOptions" /> class.
        /// </summary>
        /// <param name="customerApprovalSteps">Requires your approval of a job at specified points in the workflow. When the job is ready for approval you will be emailed a link that will take you to a web based tool you can use to view, edit and approve the job. You may request approval at two points in the workflow: before translation and before the job is returned..</param>
        /// <param name="customerApprovalTool">Determines which web based tool to use for viewing, editing and approving jobs. (default to CustomerApprovalToolEnum.CIELO24).</param>
        /// <param name="customMetadata">A JSON dictionary of key value pairs. These will be used as substitution strings when building the callback URL and custom DFXP caption header..</param>
        /// <param name="notes">Allows you to provide text that will be displayed to the transcriber when the job is processed. An HTML included will be escaped..</param>
        /// <param name="returnIwp">Allows you to receive additional callbacks when interim versions of the job are completed. If you specified a callback_url, then a callback will sent for FINAL regardless of the value of this option..</param>
        /// <param name="generateMediaIntelligenceIwp">Requests that media intelligence be generated for the specified interim/final versions of the transcript. Media intelligence data is added to the ElementList and can be retrieve using the get_elementlist API call. See [ElementList](https://cielo24.readthedocs.io/en/latest/output_formats/elementlist.html#media-intelligence-label) for details..</param>
        /// <param name="speakerId">Requests that speaker names be identified. (default to SpeakerIdEnum.False).</param>
        /// <param name="audioDescription">Requests that all noises and sounds be identified. (default to AudioDescriptionEnum.False).</param>
        /// <param name="onScreenText">Requests that any text that appears in the media be added to the transcription. (default to OnScreenTextEnum.False).</param>
        /// <param name="musicLyrics">Requests that lyrics to songs be transcribed instead of labeled [MUSIC]. (default to MusicLyricsEnum.False).</param>
        /// <param name="customSpecialHandling">Requests that transcribers follow submitted instruction set. (default to CustomSpecialHandlingEnum.False).</param>
        public JobOptions(List<CustomerApprovalStepsEnum> customerApprovalSteps = default(List<CustomerApprovalStepsEnum>), CustomerApprovalToolEnum? customerApprovalTool = CustomerApprovalToolEnum.CIELO24, Object customMetadata = default(Object), Object notes = default(Object), List<IWPEnum> returnIwp = default(List<IWPEnum>), List<IWPEnum> generateMediaIntelligenceIwp = default(List<IWPEnum>), SpeakerIdEnum? speakerId = SpeakerIdEnum.False, AudioDescriptionEnum? audioDescription = AudioDescriptionEnum.False, OnScreenTextEnum? onScreenText = OnScreenTextEnum.False, MusicLyricsEnum? musicLyrics = MusicLyricsEnum.False, CustomSpecialHandlingEnum? customSpecialHandling = CustomSpecialHandlingEnum.False)
        {
            this.CustomerApprovalSteps = customerApprovalSteps;
            this.CustomerApprovalTool = customerApprovalTool;
            this.CustomMetadata = customMetadata;
            this.Notes = notes;
            this.ReturnIwp = returnIwp;
            this.GenerateMediaIntelligenceIwp = generateMediaIntelligenceIwp;
            this.SpeakerId = speakerId;
            this.AudioDescription = audioDescription;
            this.OnScreenText = onScreenText;
            this.MusicLyrics = musicLyrics;
            this.CustomSpecialHandling = customSpecialHandling;
        }

        /// <summary>
        /// A JSON dictionary of key value pairs. These will be used as substitution strings when building the callback URL and custom DFXP caption header.
        /// </summary>
        /// <value>A JSON dictionary of key value pairs. These will be used as substitution strings when building the callback URL and custom DFXP caption header.</value>
        [DataMember(Name = "custom_metadata", EmitDefaultValue = false)]
        public Object CustomMetadata { get; set; }

        /// <summary>
        /// Allows you to provide text that will be displayed to the transcriber when the job is processed. An HTML included will be escaped.
        /// </summary>
        /// <value>Allows you to provide text that will be displayed to the transcriber when the job is processed. An HTML included will be escaped.</value>
        [DataMember(Name = "notes", EmitDefaultValue = true)]
        public Object Notes { get; set; }

        /// <summary>
        /// Allows you to receive additional callbacks when interim versions of the job are completed. If you specified a callback_url, then a callback will sent for FINAL regardless of the value of this option.
        /// </summary>
        /// <value>Allows you to receive additional callbacks when interim versions of the job are completed. If you specified a callback_url, then a callback will sent for FINAL regardless of the value of this option.</value>
        [DataMember(Name = "return_iwp", EmitDefaultValue = false)]
        public List<IWPEnum> ReturnIwp { get; set; }

        /// <summary>
        /// Requests that media intelligence be generated for the specified interim/final versions of the transcript. Media intelligence data is added to the ElementList and can be retrieve using the get_elementlist API call. See [ElementList](https://cielo24.readthedocs.io/en/latest/output_formats/elementlist.html#media-intelligence-label) for details.
        /// </summary>
        /// <value>Requests that media intelligence be generated for the specified interim/final versions of the transcript. Media intelligence data is added to the ElementList and can be retrieve using the get_elementlist API call. See [ElementList](https://cielo24.readthedocs.io/en/latest/output_formats/elementlist.html#media-intelligence-label) for details.</value>
        [DataMember(Name = "generate_media_intelligence_iwp", EmitDefaultValue = false)]
        public List<IWPEnum> GenerateMediaIntelligenceIwp { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class JobOptions {\n");
            sb.Append("  CustomerApprovalSteps: ").Append(CustomerApprovalSteps).Append("\n");
            sb.Append("  CustomerApprovalTool: ").Append(CustomerApprovalTool).Append("\n");
            sb.Append("  CustomMetadata: ").Append(CustomMetadata).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  ReturnIwp: ").Append(ReturnIwp).Append("\n");
            sb.Append("  GenerateMediaIntelligenceIwp: ").Append(GenerateMediaIntelligenceIwp).Append("\n");
            sb.Append("  SpeakerId: ").Append(SpeakerId).Append("\n");
            sb.Append("  AudioDescription: ").Append(AudioDescription).Append("\n");
            sb.Append("  OnScreenText: ").Append(OnScreenText).Append("\n");
            sb.Append("  MusicLyrics: ").Append(MusicLyrics).Append("\n");
            sb.Append("  CustomSpecialHandling: ").Append(CustomSpecialHandling).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as JobOptions);
        }

        /// <summary>
        /// Returns true if JobOptions instances are equal
        /// </summary>
        /// <param name="input">Instance of JobOptions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JobOptions input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CustomerApprovalSteps == input.CustomerApprovalSteps ||
                    this.CustomerApprovalSteps.SequenceEqual(input.CustomerApprovalSteps)
                ) && 
                (
                    this.CustomerApprovalTool == input.CustomerApprovalTool ||
                    this.CustomerApprovalTool.Equals(input.CustomerApprovalTool)
                ) && 
                (
                    this.CustomMetadata == input.CustomMetadata ||
                    (this.CustomMetadata != null &&
                    this.CustomMetadata.Equals(input.CustomMetadata))
                ) && 
                (
                    this.Notes == input.Notes ||
                    (this.Notes != null &&
                    this.Notes.Equals(input.Notes))
                ) && 
                (
                    this.ReturnIwp == input.ReturnIwp ||
                    this.ReturnIwp != null &&
                    input.ReturnIwp != null &&
                    this.ReturnIwp.SequenceEqual(input.ReturnIwp)
                ) && 
                (
                    this.GenerateMediaIntelligenceIwp == input.GenerateMediaIntelligenceIwp ||
                    this.GenerateMediaIntelligenceIwp != null &&
                    input.GenerateMediaIntelligenceIwp != null &&
                    this.GenerateMediaIntelligenceIwp.SequenceEqual(input.GenerateMediaIntelligenceIwp)
                ) && 
                (
                    this.SpeakerId == input.SpeakerId ||
                    this.SpeakerId.Equals(input.SpeakerId)
                ) && 
                (
                    this.AudioDescription == input.AudioDescription ||
                    this.AudioDescription.Equals(input.AudioDescription)
                ) && 
                (
                    this.OnScreenText == input.OnScreenText ||
                    this.OnScreenText.Equals(input.OnScreenText)
                ) && 
                (
                    this.MusicLyrics == input.MusicLyrics ||
                    this.MusicLyrics.Equals(input.MusicLyrics)
                ) && 
                (
                    this.CustomSpecialHandling == input.CustomSpecialHandling ||
                    this.CustomSpecialHandling.Equals(input.CustomSpecialHandling)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.CustomerApprovalSteps.GetHashCode();
                hashCode = (hashCode * 59) + this.CustomerApprovalTool.GetHashCode();
                if (this.CustomMetadata != null)
                {
                    hashCode = (hashCode * 59) + this.CustomMetadata.GetHashCode();
                }
                if (this.Notes != null)
                {
                    hashCode = (hashCode * 59) + this.Notes.GetHashCode();
                }
                if (this.ReturnIwp != null)
                {
                    hashCode = (hashCode * 59) + this.ReturnIwp.GetHashCode();
                }
                if (this.GenerateMediaIntelligenceIwp != null)
                {
                    hashCode = (hashCode * 59) + this.GenerateMediaIntelligenceIwp.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SpeakerId.GetHashCode();
                hashCode = (hashCode * 59) + this.AudioDescription.GetHashCode();
                hashCode = (hashCode * 59) + this.OnScreenText.GetHashCode();
                hashCode = (hashCode * 59) + this.MusicLyrics.GetHashCode();
                hashCode = (hashCode * 59) + this.CustomSpecialHandling.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
