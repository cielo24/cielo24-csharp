/*
 * Cielo24
 *
 * The cielo24 Web Services Platform API allows developers to easily integrate transcription, captioning and keyword extraction into their applications without having to use a manual web portal.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: devs@cielo24.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = cielo24.Client.OpenAPIDateConverter;

namespace cielo24.Model
{
    /// <summary>
    /// JobInfoResponse
    /// </summary>
    [DataContract(Name = "JobInfoResponse")]
    public partial class JobInfoResponse : IEquatable<JobInfoResponse>, IValidatableObject
    {
        /// <summary>
        /// Defines Priority
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PriorityEnum
        {
            /// <summary>
            /// Enum STANDARD for value: STANDARD
            /// </summary>
            [EnumMember(Value = "STANDARD")]
            STANDARD = 1,

            /// <summary>
            /// Enum PRIORITY for value: PRIORITY
            /// </summary>
            [EnumMember(Value = "PRIORITY")]
            PRIORITY = 2

        }


        /// <summary>
        /// Gets or Sets Priority
        /// </summary>
        [DataMember(Name = "Priority", EmitDefaultValue = false)]
        public PriorityEnum? Priority { get; set; }
        /// <summary>
        /// Defines Fidelity
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FidelityEnum
        {
            /// <summary>
            /// Enum MECHANICAL for value: MECHANICAL
            /// </summary>
            [EnumMember(Value = "MECHANICAL")]
            MECHANICAL = 1,

            /// <summary>
            /// Enum PREMIUM for value: PREMIUM
            /// </summary>
            [EnumMember(Value = "PREMIUM")]
            PREMIUM = 2,

            /// <summary>
            /// Enum PROFESSIONAL for value: PROFESSIONAL
            /// </summary>
            [EnumMember(Value = "PROFESSIONAL")]
            PROFESSIONAL = 3

        }


        /// <summary>
        /// Gets or Sets Fidelity
        /// </summary>
        [DataMember(Name = "Fidelity", EmitDefaultValue = false)]
        public FidelityEnum? Fidelity { get; set; }
        /// <summary>
        /// Defines JobStatus
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum JobStatusEnum
        {
            /// <summary>
            /// Enum Authorizing for value: Authorizing
            /// </summary>
            [EnumMember(Value = "Authorizing")]
            Authorizing = 1,

            /// <summary>
            /// Enum Pending for value: Pending
            /// </summary>
            [EnumMember(Value = "Pending")]
            Pending = 2,

            /// <summary>
            /// Enum InProcess for value: In Process
            /// </summary>
            [EnumMember(Value = "In Process")]
            InProcess = 3,

            /// <summary>
            /// Enum Complete for value: Complete
            /// </summary>
            [EnumMember(Value = "Complete")]
            Complete = 4,

            /// <summary>
            /// Enum MediaFailure for value: Media Failure
            /// </summary>
            [EnumMember(Value = "Media Failure")]
            MediaFailure = 5,

            /// <summary>
            /// Enum Reviewing for value: Reviewing
            /// </summary>
            [EnumMember(Value = "Reviewing")]
            Reviewing = 6

        }


        /// <summary>
        /// Gets or Sets JobStatus
        /// </summary>
        [DataMember(Name = "JobStatus", EmitDefaultValue = false)]
        public JobStatusEnum? JobStatus { get; set; }
        /// <summary>
        /// Defines JobDifficulty
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum JobDifficultyEnum
        {
            /// <summary>
            /// Enum Good for value: Good
            /// </summary>
            [EnumMember(Value = "Good")]
            Good = 1,

            /// <summary>
            /// Enum Bad for value: Bad
            /// </summary>
            [EnumMember(Value = "Bad")]
            Bad = 2,

            /// <summary>
            /// Enum Unknown for value: Unknown
            /// </summary>
            [EnumMember(Value = "Unknown")]
            Unknown = 3

        }


        /// <summary>
        /// Gets or Sets JobDifficulty
        /// </summary>
        [DataMember(Name = "JobDifficulty", EmitDefaultValue = false)]
        public JobDifficultyEnum? JobDifficulty { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="JobInfoResponse" /> class.
        /// </summary>
        /// <param name="jobId">jobId.</param>
        /// <param name="jobName">jobName.</param>
        /// <param name="mediaLengthSeconds">mediaLengthSeconds.</param>
        /// <param name="externalId">Depends on third-party integrations..</param>
        /// <param name="priority">priority.</param>
        /// <param name="fidelity">fidelity.</param>
        /// <param name="jobStatus">jobStatus.</param>
        /// <param name="options">options.</param>
        /// <param name="returnTargets">returnTargets.</param>
        /// <param name="sourceLanguage">RFC 5646 Language Code.</param>
        /// <param name="targetLanguage">RFC 5646 Language Code.</param>
        /// <param name="creationDate">ISO 8601 Date String.</param>
        /// <param name="startDate">ISO 8601 Date String.</param>
        /// <param name="dueDate">ISO 8601 Date String.</param>
        /// <param name="completedDate">ISO 8601 Date String.</param>
        /// <param name="returnDate">ISO 8601 Date String.</param>
        /// <param name="authorizationDate">ISO 8601 Date String.</param>
        /// <param name="jobDifficulty">jobDifficulty.</param>
        public JobInfoResponse(string jobId = default(string), string jobName = default(string), decimal mediaLengthSeconds = default(decimal), string externalId = default(string), PriorityEnum? priority = default(PriorityEnum?), FidelityEnum? fidelity = default(FidelityEnum?), JobStatusEnum? jobStatus = default(JobStatusEnum?), JobOptions options = default(JobOptions), Object returnTargets = default(Object), string sourceLanguage = default(string), string targetLanguage = default(string), string creationDate = default(string), string startDate = default(string), string dueDate = default(string), string completedDate = default(string), string returnDate = default(string), string authorizationDate = default(string), JobDifficultyEnum? jobDifficulty = default(JobDifficultyEnum?))
        {
            this.JobId = jobId;
            this.JobName = jobName;
            this.MediaLengthSeconds = mediaLengthSeconds;
            this.ExternalId = externalId;
            this.Priority = priority;
            this.Fidelity = fidelity;
            this.JobStatus = jobStatus;
            this.Options = options;
            this.ReturnTargets = returnTargets;
            this.SourceLanguage = sourceLanguage;
            this.TargetLanguage = targetLanguage;
            this.CreationDate = creationDate;
            this.StartDate = startDate;
            this.DueDate = dueDate;
            this.CompletedDate = completedDate;
            this.ReturnDate = returnDate;
            this.AuthorizationDate = authorizationDate;
            this.JobDifficulty = jobDifficulty;
        }

        /// <summary>
        /// Gets or Sets JobId
        /// </summary>
        [DataMember(Name = "JobId", EmitDefaultValue = false)]
        public string JobId { get; set; }

        /// <summary>
        /// Gets or Sets JobName
        /// </summary>
        [DataMember(Name = "JobName", EmitDefaultValue = false)]
        public string JobName { get; set; }

        /// <summary>
        /// Gets or Sets MediaLengthSeconds
        /// </summary>
        [DataMember(Name = "MediaLengthSeconds", EmitDefaultValue = false)]
        public decimal MediaLengthSeconds { get; set; }

        /// <summary>
        /// Depends on third-party integrations.
        /// </summary>
        /// <value>Depends on third-party integrations.</value>
        [DataMember(Name = "ExternalId", EmitDefaultValue = false)]
        public string ExternalId { get; set; }

        /// <summary>
        /// Gets or Sets Options
        /// </summary>
        [DataMember(Name = "Options", EmitDefaultValue = false)]
        public JobOptions Options { get; set; }

        /// <summary>
        /// Gets or Sets ReturnTargets
        /// </summary>
        [DataMember(Name = "ReturnTargets", EmitDefaultValue = false)]
        public Object ReturnTargets { get; set; }

        /// <summary>
        /// RFC 5646 Language Code
        /// </summary>
        /// <value>RFC 5646 Language Code</value>
        [DataMember(Name = "SourceLanguage", EmitDefaultValue = false)]
        public string SourceLanguage { get; set; }

        /// <summary>
        /// RFC 5646 Language Code
        /// </summary>
        /// <value>RFC 5646 Language Code</value>
        [DataMember(Name = "TargetLanguage", EmitDefaultValue = false)]
        public string TargetLanguage { get; set; }

        /// <summary>
        /// ISO 8601 Date String
        /// </summary>
        /// <value>ISO 8601 Date String</value>
        [DataMember(Name = "CreationDate", EmitDefaultValue = false)]
        public string CreationDate { get; set; }

        /// <summary>
        /// ISO 8601 Date String
        /// </summary>
        /// <value>ISO 8601 Date String</value>
        [DataMember(Name = "StartDate", EmitDefaultValue = false)]
        public string StartDate { get; set; }

        /// <summary>
        /// ISO 8601 Date String
        /// </summary>
        /// <value>ISO 8601 Date String</value>
        [DataMember(Name = "DueDate", EmitDefaultValue = false)]
        public string DueDate { get; set; }

        /// <summary>
        /// ISO 8601 Date String
        /// </summary>
        /// <value>ISO 8601 Date String</value>
        [DataMember(Name = "CompletedDate", EmitDefaultValue = false)]
        public string CompletedDate { get; set; }

        /// <summary>
        /// ISO 8601 Date String
        /// </summary>
        /// <value>ISO 8601 Date String</value>
        [DataMember(Name = "ReturnDate", EmitDefaultValue = false)]
        public string ReturnDate { get; set; }

        /// <summary>
        /// ISO 8601 Date String
        /// </summary>
        /// <value>ISO 8601 Date String</value>
        [DataMember(Name = "AuthorizationDate", EmitDefaultValue = false)]
        public string AuthorizationDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class JobInfoResponse {\n");
            sb.Append("  JobId: ").Append(JobId).Append("\n");
            sb.Append("  JobName: ").Append(JobName).Append("\n");
            sb.Append("  MediaLengthSeconds: ").Append(MediaLengthSeconds).Append("\n");
            sb.Append("  ExternalId: ").Append(ExternalId).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  Fidelity: ").Append(Fidelity).Append("\n");
            sb.Append("  JobStatus: ").Append(JobStatus).Append("\n");
            sb.Append("  Options: ").Append(Options).Append("\n");
            sb.Append("  ReturnTargets: ").Append(ReturnTargets).Append("\n");
            sb.Append("  SourceLanguage: ").Append(SourceLanguage).Append("\n");
            sb.Append("  TargetLanguage: ").Append(TargetLanguage).Append("\n");
            sb.Append("  CreationDate: ").Append(CreationDate).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  DueDate: ").Append(DueDate).Append("\n");
            sb.Append("  CompletedDate: ").Append(CompletedDate).Append("\n");
            sb.Append("  ReturnDate: ").Append(ReturnDate).Append("\n");
            sb.Append("  AuthorizationDate: ").Append(AuthorizationDate).Append("\n");
            sb.Append("  JobDifficulty: ").Append(JobDifficulty).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as JobInfoResponse);
        }

        /// <summary>
        /// Returns true if JobInfoResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of JobInfoResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JobInfoResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.JobId == input.JobId ||
                    (this.JobId != null &&
                    this.JobId.Equals(input.JobId))
                ) && 
                (
                    this.JobName == input.JobName ||
                    (this.JobName != null &&
                    this.JobName.Equals(input.JobName))
                ) && 
                (
                    this.MediaLengthSeconds == input.MediaLengthSeconds ||
                    this.MediaLengthSeconds.Equals(input.MediaLengthSeconds)
                ) && 
                (
                    this.ExternalId == input.ExternalId ||
                    (this.ExternalId != null &&
                    this.ExternalId.Equals(input.ExternalId))
                ) && 
                (
                    this.Priority == input.Priority ||
                    this.Priority.Equals(input.Priority)
                ) && 
                (
                    this.Fidelity == input.Fidelity ||
                    this.Fidelity.Equals(input.Fidelity)
                ) && 
                (
                    this.JobStatus == input.JobStatus ||
                    this.JobStatus.Equals(input.JobStatus)
                ) && 
                (
                    this.Options == input.Options ||
                    (this.Options != null &&
                    this.Options.Equals(input.Options))
                ) && 
                (
                    this.ReturnTargets == input.ReturnTargets ||
                    (this.ReturnTargets != null &&
                    this.ReturnTargets.Equals(input.ReturnTargets))
                ) && 
                (
                    this.SourceLanguage == input.SourceLanguage ||
                    (this.SourceLanguage != null &&
                    this.SourceLanguage.Equals(input.SourceLanguage))
                ) && 
                (
                    this.TargetLanguage == input.TargetLanguage ||
                    (this.TargetLanguage != null &&
                    this.TargetLanguage.Equals(input.TargetLanguage))
                ) && 
                (
                    this.CreationDate == input.CreationDate ||
                    (this.CreationDate != null &&
                    this.CreationDate.Equals(input.CreationDate))
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.DueDate == input.DueDate ||
                    (this.DueDate != null &&
                    this.DueDate.Equals(input.DueDate))
                ) && 
                (
                    this.CompletedDate == input.CompletedDate ||
                    (this.CompletedDate != null &&
                    this.CompletedDate.Equals(input.CompletedDate))
                ) && 
                (
                    this.ReturnDate == input.ReturnDate ||
                    (this.ReturnDate != null &&
                    this.ReturnDate.Equals(input.ReturnDate))
                ) && 
                (
                    this.AuthorizationDate == input.AuthorizationDate ||
                    (this.AuthorizationDate != null &&
                    this.AuthorizationDate.Equals(input.AuthorizationDate))
                ) && 
                (
                    this.JobDifficulty == input.JobDifficulty ||
                    this.JobDifficulty.Equals(input.JobDifficulty)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.JobId != null)
                {
                    hashCode = (hashCode * 59) + this.JobId.GetHashCode();
                }
                if (this.JobName != null)
                {
                    hashCode = (hashCode * 59) + this.JobName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.MediaLengthSeconds.GetHashCode();
                if (this.ExternalId != null)
                {
                    hashCode = (hashCode * 59) + this.ExternalId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Priority.GetHashCode();
                hashCode = (hashCode * 59) + this.Fidelity.GetHashCode();
                hashCode = (hashCode * 59) + this.JobStatus.GetHashCode();
                if (this.Options != null)
                {
                    hashCode = (hashCode * 59) + this.Options.GetHashCode();
                }
                if (this.ReturnTargets != null)
                {
                    hashCode = (hashCode * 59) + this.ReturnTargets.GetHashCode();
                }
                if (this.SourceLanguage != null)
                {
                    hashCode = (hashCode * 59) + this.SourceLanguage.GetHashCode();
                }
                if (this.TargetLanguage != null)
                {
                    hashCode = (hashCode * 59) + this.TargetLanguage.GetHashCode();
                }
                if (this.CreationDate != null)
                {
                    hashCode = (hashCode * 59) + this.CreationDate.GetHashCode();
                }
                if (this.StartDate != null)
                {
                    hashCode = (hashCode * 59) + this.StartDate.GetHashCode();
                }
                if (this.DueDate != null)
                {
                    hashCode = (hashCode * 59) + this.DueDate.GetHashCode();
                }
                if (this.CompletedDate != null)
                {
                    hashCode = (hashCode * 59) + this.CompletedDate.GetHashCode();
                }
                if (this.ReturnDate != null)
                {
                    hashCode = (hashCode * 59) + this.ReturnDate.GetHashCode();
                }
                if (this.AuthorizationDate != null)
                {
                    hashCode = (hashCode * 59) + this.AuthorizationDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.JobDifficulty.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
