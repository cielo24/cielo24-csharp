/*
 * Cielo24
 *
 * The cielo24 Web Services Platform API allows developers to easily integrate transcription, captioning and keyword extraction into their applications without having to use a manual web portal.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: devs@cielo24.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using cielo24.Client;
using cielo24.Model;

namespace cielo24.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IJobApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add a piece of media to an existing job using a local file. No content-type should be included in the HTTP header. The media should be uploaded as raw binary, no encoding (base64, hex, etc) is required. Chunk-transfer encoding is NOT supported. File size is limited to 10 gb
        /// </remarks>
        /// <exception cref="cielo24.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v"></param>
        /// <param name="jobId"></param>
        /// <param name="contentLength"></param>
        /// <param name="body"></param>
        /// <param name="isDuplicate"> (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AddMediaResponse</returns>
        AddMediaResponse AddMediaFile(int v, string jobId, int contentLength, System.IO.Stream body, string isDuplicate = default(string), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add a piece of media to an existing job using a local file. No content-type should be included in the HTTP header. The media should be uploaded as raw binary, no encoding (base64, hex, etc) is required. Chunk-transfer encoding is NOT supported. File size is limited to 10 gb
        /// </remarks>
        /// <exception cref="cielo24.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v"></param>
        /// <param name="jobId"></param>
        /// <param name="contentLength"></param>
        /// <param name="body"></param>
        /// <param name="isDuplicate"> (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AddMediaResponse</returns>
        ApiResponse<AddMediaResponse> AddMediaFileWithHttpInfo(int v, string jobId, int contentLength, System.IO.Stream body, string isDuplicate = default(string), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add a piece of media to an existing job using a public media url. A job may only have a single piece of media associated with it, attempting to add additional media will return an error code.
        /// </remarks>
        /// <exception cref="cielo24.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v"></param>
        /// <param name="jobId"></param>
        /// <param name="mediaUrl"></param>
        /// <param name="isDuplicate"> (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AddMediaResponse</returns>
        AddMediaResponse AddMediaUrl(int v, string jobId, string mediaUrl, string isDuplicate = default(string), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add a piece of media to an existing job using a public media url. A job may only have a single piece of media associated with it, attempting to add additional media will return an error code.
        /// </remarks>
        /// <exception cref="cielo24.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v"></param>
        /// <param name="jobId"></param>
        /// <param name="mediaUrl"></param>
        /// <param name="isDuplicate"> (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AddMediaResponse</returns>
        ApiResponse<AddMediaResponse> AddMediaUrlWithHttpInfo(int v, string jobId, string mediaUrl, string isDuplicate = default(string), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Authorize an existing job. If your account has the \&quot;customer authorization\&quot; feature enabled (it is not enabled by default) jobs you create will be held in the \&quot;Authorizing\&quot; state until you call this method. Calling this method on a job that is not the \&quot;Authorizing\&quot; state has no effect and will return success. Please contact support@cielo24.com to enable the \&quot;customer authorization\&quot; feature.
        /// </remarks>
        /// <exception cref="cielo24.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v"></param>
        /// <param name="jobId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void AuthorizeJob(int v, string jobId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Authorize an existing job. If your account has the \&quot;customer authorization\&quot; feature enabled (it is not enabled by default) jobs you create will be held in the \&quot;Authorizing\&quot; state until you call this method. Calling this method on a job that is not the \&quot;Authorizing\&quot; state has no effect and will return success. Please contact support@cielo24.com to enable the \&quot;customer authorization\&quot; feature.
        /// </remarks>
        /// <exception cref="cielo24.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v"></param>
        /// <param name="jobId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AuthorizeJobWithHttpInfo(int v, string jobId, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the caption file for a job. The job must have completed transcription before a caption can be downloaded.
        /// </remarks>
        /// <exception cref="cielo24.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v"></param>
        /// <param name="jobId"></param>
        /// <param name="captionFormat"></param>
        /// <param name="buildUrl">Rather than returning the file, return a permanent URL to the file. (optional, default to false)</param>
        /// <param name="captionWordsMin">Minimum number of words allowed in a caption. (optional, default to 1)</param>
        /// <param name="captionBySentence">When true, puts each sentence into its own caption. When false, more than one sentence may appear in a single caption. (optional, default to true)</param>
        /// <param name="charactersPerCaptionLine">Maximum number of characters to be displayed on each caption line. (optional, default to 42)</param>
        /// <param name="dfxpHeader">Allows you to specify a custom header for your DFXP caption file. The header should be the entire contents of the header including the opening and closing tags. Ignored if caption_format does not equal DFXP. (optional, default to &quot;&quot;)</param>
        /// <param name="disallowDangling">Will prevent captions from having the last word in a sentence start a new line. Last words will ALWAYS be kept on the same line, even if it breaks the characters_per_caption_line option. (optional, default to false)</param>
        /// <param name="displayEffectsSpeakerAs">Determines what speaker name should used for sound effects. (optional, default to &quot;Effects&quot;)</param>
        /// <param name="displaySpeakerId">Determines the way speakers are identified in the captions. Choose \&quot;no\&quot; to not display speaker identities at all: \&quot;&gt;&gt; example\&quot; Choose \&quot;number\&quot; to display only the speaker number: \&quot;&gt;&gt; Speaker 1: example\&quot; Choose \&quot;name\&quot; to display the speaker name: \&quot;&gt;&gt; John Doe: example\&quot;. If you choose \&quot;name\&quot;, the speaker number will be displayed if the name is not available. (optional, default to name)</param>
        /// <param name="iwpName">The named version of element list to generate the transcript from. If not specified, the transcript will be generated from the latest version. (optional)</param>
        /// <param name="elementlistVersion">The version of element list to generate the captions from. If not specified, the caption will be generated from the latest version. (ISO 8601 Date String) (optional, default to &quot;&quot;)</param>
        /// <param name="emitSpeakerChangeTokensAs">Determine what characters to use to denote speaker changes. (optional, default to &quot;&gt;&gt;&quot;)</param>
        /// <param name="forceCase">Force the contents of the captions to be all UPPER or lower case. If blank, the case of the captions is not changed. (optional)</param>
        /// <param name="includeDfxpMetadata">When true, and the caption format requested is DFXP, the jobs name, ID and language will be added to the DFXP metadata header. When false, these data are omitted from the header. Ignored if caption_format does not equal DFXP. (optional, default to true)</param>
        /// <param name="layoutTargetCaptionLengthMs">Captions generated will, on average, be this duration. However, they may vary significantly based on other parameters you set. (optional, default to 5000)</param>
        /// <param name="lineBreakOnSentence">Inserts a line break in between sentences that are in the same caption. (optional, default to false)</param>
        /// <param name="lineEndingFormat">Determine the end of line (EOL) character to use for the captions. (optional, default to UNIX)</param>
        /// <param name="linesPerCaption">Number of lines to be displayed for each caption. (optional, default to 2)</param>
        /// <param name="maskProfanity">Replace profanity with asterisks. (optional, default to false)</param>
        /// <param name="maximumCaptionDuration">No captions longer than this (in milliseconds) will be produced. If not specified, there is no maximum. (optional)</param>
        /// <param name="mergeGapInterval">Captions with a gap between them that is smaller than this (in milliseconds) will have their start and/or end times changed so there is no time gap between the captions. (optional, default to 1000)</param>
        /// <param name="minimumCaptionLengthMs">Extends the duration of short captions to the this minimum length. Additional time is taken from later caption blocks to meet this minimum time. (optional)</param>
        /// <param name="minimumGapBetweenCaptionsMs">Adds a minimum time between captions such as there will always be some time between captions where no text is displayed. When captions are very close together, time will be removed from the caption duration to make the gap. (optional)</param>
        /// <param name="qtSeamless">Does not put time gaps of any kind between caption blocks. Ignored if caption_format does not equal QT. (optional, default to false)</param>
        /// <param name="removeDisfluencies">Remove verbal disfluencies from the generated transcript. Common disfluencies such as \&quot;um\&quot; and \&quot;ah\&quot; are removed while maintaining appropriate punctuation. (optional, default to true)</param>
        /// <param name="removeSoundsList">A list of sounds to not show in the caption. This is a JSON style list, and should look like [\&quot;MUSIC\&quot;, \&quot;LAUGH\&quot;]. Ignored if remove_sound_references is true. (optional)</param>
        /// <param name="removeSoundReferences">Remove ALL non-verbal sound and noise references from the generated transcript. Sounds and unidentified noises are depicted in the caption as [SOUND], [COUGH] and [NOISE]. If this parameter is set, these identifiers are omitted from the caption. (optional, default to true)</param>
        /// <param name="replaceSlang">Replace common slang terms from the generated transcript. Common replacements are \&quot;want to\&quot; for \&quot;wanna\&quot;, \&quot;going to\&quot; for \&quot;gonna\&quot;, etc. (optional, default to false)</param>
        /// <param name="silenceMaxMs">If there is a interval of silence in the middle of a sentence longer than this, then the caption will be split. (optional, default to 2000)</param>
        /// <param name="singleSpeakerPerCaption">When true, puts each speaker into its own caption. When false, more than one speaker may appear in a single caption. (optional, default to true)</param>
        /// <param name="soundBoundaries">Specifies the characters to surround sound references with. The default will generate sound references that look like this: [MUSIC]. (optional)</param>
        /// <param name="soundThreshold">Sound references that are longer than this threshold will be made their own caption entirely, and will not have any text included with them. If not set, Sound references will be included back to back with text no matter the duration of the sound. (optional)</param>
        /// <param name="soundTokensByCaption">If true, all sound references will always be in their own caption. If false, more than one sound reference may appear in a single caption. (optional, default to false)</param>
        /// <param name="soundTokensByLine">If true, all sound references will always be in their own line. If false, more than one sound reference may appear in a single line. (optional, default to false)</param>
        /// <param name="soundTokensByCaptionList">If non-empty, the specified sound references will always be in their own caption. If empty, more than one sound reference may appear in a single caption. Ignored if sound_tokens_by_caption is true. (optional)</param>
        /// <param name="soundTokensByLineList">If non-empty, the specified sound references will always be in their own line. If empty, more than one sound reference may appear in a single line. Ignored if sound_tokens_by_line is true. (optional)</param>
        /// <param name="speakerOnNewLine">If true, a speaker change will cause a new caption to be made. If false, multiple speakers may appear in a single caption. (optional, default to true)</param>
        /// <param name="srtFormat">If the caption format is SRT, determines what the caption blocks will look like. The default, prints caption blocks that look like this:    1:   00:00:06,060 - -&gt; 00:00:16,060   This is the caption text.  You can alter the caption block by re-arranging or removing the substitution string values, shown enclosed in braces \&quot;{}\&quot; in the default value below. Substitution strings may used more than once if desired. Any text that is not a substitution string will be displayed as written. To add new lines, include a \\n. Note, you may need to escape the \\n with an extra backslash when encoding the request.  (optional, default to &quot;{caption_number:d}\n{start_hour:02d}:{start_minute:02d}:{start_second:02d},{start_millisecond:03d} --&gt;{end_hour:02d}:{end_minute:02d}:{end_second:02d},{end_millisecond:03d}\n{caption_text}\n\n&quot;)</param>
        /// <param name="stripSquareBrackets">Removes all square brackets like &#39;[&#39; or &#39;]&#39; from captions. By default square brackets surround sound references like &#39;[MUSIC]&#39;, but they may exist as part of the caption text as well. (optional, default to false)</param>
        /// <param name="utf8Mark">Adds a utf8 bytemark to the beginning of the caption. This should only be used if the system you are loading the caption files into needs a byte marker. The vast majority of systems do not. (optional, default to false)</param>
        /// <param name="replaceEnglishSpelling">Replaces English spelling with location accurate spelling. i.e. Color - -&gt; Colour  A: American  B: British  Z: British ize  U: Australian  C: Canadian  (optional, default to A)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        string GetCaption(int v, string jobId, string captionFormat, string buildUrl = default(string), int? captionWordsMin = default(int?), string captionBySentence = default(string), int? charactersPerCaptionLine = default(int?), string dfxpHeader = default(string), string disallowDangling = default(string), string displayEffectsSpeakerAs = default(string), string displaySpeakerId = default(string), string iwpName = default(string), string elementlistVersion = default(string), string emitSpeakerChangeTokensAs = default(string), string forceCase = default(string), string includeDfxpMetadata = default(string), int? layoutTargetCaptionLengthMs = default(int?), string lineBreakOnSentence = default(string), string lineEndingFormat = default(string), int? linesPerCaption = default(int?), string maskProfanity = default(string), int? maximumCaptionDuration = default(int?), int? mergeGapInterval = default(int?), int? minimumCaptionLengthMs = default(int?), int? minimumGapBetweenCaptionsMs = default(int?), string qtSeamless = default(string), string removeDisfluencies = default(string), List<string> removeSoundsList = default(List<string>), string removeSoundReferences = default(string), string replaceSlang = default(string), int? silenceMaxMs = default(int?), string singleSpeakerPerCaption = default(string), List<string> soundBoundaries = default(List<string>), int? soundThreshold = default(int?), string soundTokensByCaption = default(string), string soundTokensByLine = default(string), List<string> soundTokensByCaptionList = default(List<string>), List<string> soundTokensByLineList = default(List<string>), string speakerOnNewLine = default(string), string srtFormat = default(string), string stripSquareBrackets = default(string), string utf8Mark = default(string), string replaceEnglishSpelling = default(string), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the caption file for a job. The job must have completed transcription before a caption can be downloaded.
        /// </remarks>
        /// <exception cref="cielo24.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v"></param>
        /// <param name="jobId"></param>
        /// <param name="captionFormat"></param>
        /// <param name="buildUrl">Rather than returning the file, return a permanent URL to the file. (optional, default to false)</param>
        /// <param name="captionWordsMin">Minimum number of words allowed in a caption. (optional, default to 1)</param>
        /// <param name="captionBySentence">When true, puts each sentence into its own caption. When false, more than one sentence may appear in a single caption. (optional, default to true)</param>
        /// <param name="charactersPerCaptionLine">Maximum number of characters to be displayed on each caption line. (optional, default to 42)</param>
        /// <param name="dfxpHeader">Allows you to specify a custom header for your DFXP caption file. The header should be the entire contents of the header including the opening and closing tags. Ignored if caption_format does not equal DFXP. (optional, default to &quot;&quot;)</param>
        /// <param name="disallowDangling">Will prevent captions from having the last word in a sentence start a new line. Last words will ALWAYS be kept on the same line, even if it breaks the characters_per_caption_line option. (optional, default to false)</param>
        /// <param name="displayEffectsSpeakerAs">Determines what speaker name should used for sound effects. (optional, default to &quot;Effects&quot;)</param>
        /// <param name="displaySpeakerId">Determines the way speakers are identified in the captions. Choose \&quot;no\&quot; to not display speaker identities at all: \&quot;&gt;&gt; example\&quot; Choose \&quot;number\&quot; to display only the speaker number: \&quot;&gt;&gt; Speaker 1: example\&quot; Choose \&quot;name\&quot; to display the speaker name: \&quot;&gt;&gt; John Doe: example\&quot;. If you choose \&quot;name\&quot;, the speaker number will be displayed if the name is not available. (optional, default to name)</param>
        /// <param name="iwpName">The named version of element list to generate the transcript from. If not specified, the transcript will be generated from the latest version. (optional)</param>
        /// <param name="elementlistVersion">The version of element list to generate the captions from. If not specified, the caption will be generated from the latest version. (ISO 8601 Date String) (optional, default to &quot;&quot;)</param>
        /// <param name="emitSpeakerChangeTokensAs">Determine what characters to use to denote speaker changes. (optional, default to &quot;&gt;&gt;&quot;)</param>
        /// <param name="forceCase">Force the contents of the captions to be all UPPER or lower case. If blank, the case of the captions is not changed. (optional)</param>
        /// <param name="includeDfxpMetadata">When true, and the caption format requested is DFXP, the jobs name, ID and language will be added to the DFXP metadata header. When false, these data are omitted from the header. Ignored if caption_format does not equal DFXP. (optional, default to true)</param>
        /// <param name="layoutTargetCaptionLengthMs">Captions generated will, on average, be this duration. However, they may vary significantly based on other parameters you set. (optional, default to 5000)</param>
        /// <param name="lineBreakOnSentence">Inserts a line break in between sentences that are in the same caption. (optional, default to false)</param>
        /// <param name="lineEndingFormat">Determine the end of line (EOL) character to use for the captions. (optional, default to UNIX)</param>
        /// <param name="linesPerCaption">Number of lines to be displayed for each caption. (optional, default to 2)</param>
        /// <param name="maskProfanity">Replace profanity with asterisks. (optional, default to false)</param>
        /// <param name="maximumCaptionDuration">No captions longer than this (in milliseconds) will be produced. If not specified, there is no maximum. (optional)</param>
        /// <param name="mergeGapInterval">Captions with a gap between them that is smaller than this (in milliseconds) will have their start and/or end times changed so there is no time gap between the captions. (optional, default to 1000)</param>
        /// <param name="minimumCaptionLengthMs">Extends the duration of short captions to the this minimum length. Additional time is taken from later caption blocks to meet this minimum time. (optional)</param>
        /// <param name="minimumGapBetweenCaptionsMs">Adds a minimum time between captions such as there will always be some time between captions where no text is displayed. When captions are very close together, time will be removed from the caption duration to make the gap. (optional)</param>
        /// <param name="qtSeamless">Does not put time gaps of any kind between caption blocks. Ignored if caption_format does not equal QT. (optional, default to false)</param>
        /// <param name="removeDisfluencies">Remove verbal disfluencies from the generated transcript. Common disfluencies such as \&quot;um\&quot; and \&quot;ah\&quot; are removed while maintaining appropriate punctuation. (optional, default to true)</param>
        /// <param name="removeSoundsList">A list of sounds to not show in the caption. This is a JSON style list, and should look like [\&quot;MUSIC\&quot;, \&quot;LAUGH\&quot;]. Ignored if remove_sound_references is true. (optional)</param>
        /// <param name="removeSoundReferences">Remove ALL non-verbal sound and noise references from the generated transcript. Sounds and unidentified noises are depicted in the caption as [SOUND], [COUGH] and [NOISE]. If this parameter is set, these identifiers are omitted from the caption. (optional, default to true)</param>
        /// <param name="replaceSlang">Replace common slang terms from the generated transcript. Common replacements are \&quot;want to\&quot; for \&quot;wanna\&quot;, \&quot;going to\&quot; for \&quot;gonna\&quot;, etc. (optional, default to false)</param>
        /// <param name="silenceMaxMs">If there is a interval of silence in the middle of a sentence longer than this, then the caption will be split. (optional, default to 2000)</param>
        /// <param name="singleSpeakerPerCaption">When true, puts each speaker into its own caption. When false, more than one speaker may appear in a single caption. (optional, default to true)</param>
        /// <param name="soundBoundaries">Specifies the characters to surround sound references with. The default will generate sound references that look like this: [MUSIC]. (optional)</param>
        /// <param name="soundThreshold">Sound references that are longer than this threshold will be made their own caption entirely, and will not have any text included with them. If not set, Sound references will be included back to back with text no matter the duration of the sound. (optional)</param>
        /// <param name="soundTokensByCaption">If true, all sound references will always be in their own caption. If false, more than one sound reference may appear in a single caption. (optional, default to false)</param>
        /// <param name="soundTokensByLine">If true, all sound references will always be in their own line. If false, more than one sound reference may appear in a single line. (optional, default to false)</param>
        /// <param name="soundTokensByCaptionList">If non-empty, the specified sound references will always be in their own caption. If empty, more than one sound reference may appear in a single caption. Ignored if sound_tokens_by_caption is true. (optional)</param>
        /// <param name="soundTokensByLineList">If non-empty, the specified sound references will always be in their own line. If empty, more than one sound reference may appear in a single line. Ignored if sound_tokens_by_line is true. (optional)</param>
        /// <param name="speakerOnNewLine">If true, a speaker change will cause a new caption to be made. If false, multiple speakers may appear in a single caption. (optional, default to true)</param>
        /// <param name="srtFormat">If the caption format is SRT, determines what the caption blocks will look like. The default, prints caption blocks that look like this:    1:   00:00:06,060 - -&gt; 00:00:16,060   This is the caption text.  You can alter the caption block by re-arranging or removing the substitution string values, shown enclosed in braces \&quot;{}\&quot; in the default value below. Substitution strings may used more than once if desired. Any text that is not a substitution string will be displayed as written. To add new lines, include a \\n. Note, you may need to escape the \\n with an extra backslash when encoding the request.  (optional, default to &quot;{caption_number:d}\n{start_hour:02d}:{start_minute:02d}:{start_second:02d},{start_millisecond:03d} --&gt;{end_hour:02d}:{end_minute:02d}:{end_second:02d},{end_millisecond:03d}\n{caption_text}\n\n&quot;)</param>
        /// <param name="stripSquareBrackets">Removes all square brackets like &#39;[&#39; or &#39;]&#39; from captions. By default square brackets surround sound references like &#39;[MUSIC]&#39;, but they may exist as part of the caption text as well. (optional, default to false)</param>
        /// <param name="utf8Mark">Adds a utf8 bytemark to the beginning of the caption. This should only be used if the system you are loading the caption files into needs a byte marker. The vast majority of systems do not. (optional, default to false)</param>
        /// <param name="replaceEnglishSpelling">Replaces English spelling with location accurate spelling. i.e. Color - -&gt; Colour  A: American  B: British  Z: British ize  U: Australian  C: Canadian  (optional, default to A)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> GetCaptionWithHttpInfo(int v, string jobId, string captionFormat, string buildUrl = default(string), int? captionWordsMin = default(int?), string captionBySentence = default(string), int? charactersPerCaptionLine = default(int?), string dfxpHeader = default(string), string disallowDangling = default(string), string displayEffectsSpeakerAs = default(string), string displaySpeakerId = default(string), string iwpName = default(string), string elementlistVersion = default(string), string emitSpeakerChangeTokensAs = default(string), string forceCase = default(string), string includeDfxpMetadata = default(string), int? layoutTargetCaptionLengthMs = default(int?), string lineBreakOnSentence = default(string), string lineEndingFormat = default(string), int? linesPerCaption = default(int?), string maskProfanity = default(string), int? maximumCaptionDuration = default(int?), int? mergeGapInterval = default(int?), int? minimumCaptionLengthMs = default(int?), int? minimumGapBetweenCaptionsMs = default(int?), string qtSeamless = default(string), string removeDisfluencies = default(string), List<string> removeSoundsList = default(List<string>), string removeSoundReferences = default(string), string replaceSlang = default(string), int? silenceMaxMs = default(int?), string singleSpeakerPerCaption = default(string), List<string> soundBoundaries = default(List<string>), int? soundThreshold = default(int?), string soundTokensByCaption = default(string), string soundTokensByLine = default(string), List<string> soundTokensByCaptionList = default(List<string>), List<string> soundTokensByLineList = default(List<string>), string speakerOnNewLine = default(string), string srtFormat = default(string), string stripSquareBrackets = default(string), string utf8Mark = default(string), string replaceEnglishSpelling = default(string), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="cielo24.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v"></param>
        /// <param name="jobId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>JobInfoResponse</returns>
        JobInfoResponse JobInfo(int v, string jobId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cielo24.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v"></param>
        /// <param name="jobId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of JobInfoResponse</returns>
        ApiResponse<JobInfoResponse> JobInfoWithHttpInfo(int v, string jobId, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a new job. A job is a container into which you can upload media and request that transcription be performed. Creating a job is prerequisite for virtually all other methods.
        /// </remarks>
        /// <exception cref="cielo24.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v"></param>
        /// <param name="newJobBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>NewJobResponse</returns>
        NewJobResponse NewJob(int v, NewJobBody newJobBody, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a new job. A job is a container into which you can upload media and request that transcription be performed. Creating a job is prerequisite for virtually all other methods.
        /// </remarks>
        /// <exception cref="cielo24.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v"></param>
        /// <param name="newJobBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of NewJobResponse</returns>
        ApiResponse<NewJobResponse> NewJobWithHttpInfo(int v, NewJobBody newJobBody, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Request that transcription be performed on the specified job. A callback URL, if specified, will be called when the transcription is complete. See [callback documentation](https://cielo24.readthedocs.io/en/latest/basics.html#callbacks-label) for details.
        /// </remarks>
        /// <exception cref="cielo24.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v"></param>
        /// <param name="performTranscriptionBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PerformTranscriptionResponse</returns>
        PerformTranscriptionResponse PerformTranscription(int v, PerformTranscriptionBody performTranscriptionBody, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Request that transcription be performed on the specified job. A callback URL, if specified, will be called when the transcription is complete. See [callback documentation](https://cielo24.readthedocs.io/en/latest/basics.html#callbacks-label) for details.
        /// </remarks>
        /// <exception cref="cielo24.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v"></param>
        /// <param name="performTranscriptionBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PerformTranscriptionResponse</returns>
        ApiResponse<PerformTranscriptionResponse> PerformTranscriptionWithHttpInfo(int v, PerformTranscriptionBody performTranscriptionBody, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Request that orders a new Translation language for a video that has been previously Transcribed and/or Translated. The New Job ID and job target language will be returned upon completion.
        /// </remarks>
        /// <exception cref="cielo24.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v"></param>
        /// <param name="jobId"></param>
        /// <param name="targetLanguages">The language(s) being ordered (Any RFC 5646 language code) separated by comma (,)</param>
        /// <param name="approveUplevel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PerformTranslationResponse</returns>
        PerformTranslationResponse PerformTranslation(int v, string jobId, string targetLanguages, string approveUplevel = default(string), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Request that orders a new Translation language for a video that has been previously Transcribed and/or Translated. The New Job ID and job target language will be returned upon completion.
        /// </remarks>
        /// <exception cref="cielo24.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v"></param>
        /// <param name="jobId"></param>
        /// <param name="targetLanguages">The language(s) being ordered (Any RFC 5646 language code) separated by comma (,)</param>
        /// <param name="approveUplevel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PerformTranslationResponse</returns>
        ApiResponse<PerformTranslationResponse> PerformTranslationWithHttpInfo(int v, string jobId, string targetLanguages, string approveUplevel = default(string), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IJobApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add a piece of media to an existing job using a local file. No content-type should be included in the HTTP header. The media should be uploaded as raw binary, no encoding (base64, hex, etc) is required. Chunk-transfer encoding is NOT supported. File size is limited to 10 gb
        /// </remarks>
        /// <exception cref="cielo24.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v"></param>
        /// <param name="jobId"></param>
        /// <param name="contentLength"></param>
        /// <param name="body"></param>
        /// <param name="isDuplicate"> (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AddMediaResponse</returns>
        System.Threading.Tasks.Task<AddMediaResponse> AddMediaFileAsync(int v, string jobId, int contentLength, System.IO.Stream body, string isDuplicate = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add a piece of media to an existing job using a local file. No content-type should be included in the HTTP header. The media should be uploaded as raw binary, no encoding (base64, hex, etc) is required. Chunk-transfer encoding is NOT supported. File size is limited to 10 gb
        /// </remarks>
        /// <exception cref="cielo24.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v"></param>
        /// <param name="jobId"></param>
        /// <param name="contentLength"></param>
        /// <param name="body"></param>
        /// <param name="isDuplicate"> (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AddMediaResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddMediaResponse>> AddMediaFileWithHttpInfoAsync(int v, string jobId, int contentLength, System.IO.Stream body, string isDuplicate = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add a piece of media to an existing job using a public media url. A job may only have a single piece of media associated with it, attempting to add additional media will return an error code.
        /// </remarks>
        /// <exception cref="cielo24.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v"></param>
        /// <param name="jobId"></param>
        /// <param name="mediaUrl"></param>
        /// <param name="isDuplicate"> (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AddMediaResponse</returns>
        System.Threading.Tasks.Task<AddMediaResponse> AddMediaUrlAsync(int v, string jobId, string mediaUrl, string isDuplicate = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add a piece of media to an existing job using a public media url. A job may only have a single piece of media associated with it, attempting to add additional media will return an error code.
        /// </remarks>
        /// <exception cref="cielo24.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v"></param>
        /// <param name="jobId"></param>
        /// <param name="mediaUrl"></param>
        /// <param name="isDuplicate"> (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AddMediaResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddMediaResponse>> AddMediaUrlWithHttpInfoAsync(int v, string jobId, string mediaUrl, string isDuplicate = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Authorize an existing job. If your account has the \&quot;customer authorization\&quot; feature enabled (it is not enabled by default) jobs you create will be held in the \&quot;Authorizing\&quot; state until you call this method. Calling this method on a job that is not the \&quot;Authorizing\&quot; state has no effect and will return success. Please contact support@cielo24.com to enable the \&quot;customer authorization\&quot; feature.
        /// </remarks>
        /// <exception cref="cielo24.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v"></param>
        /// <param name="jobId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AuthorizeJobAsync(int v, string jobId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Authorize an existing job. If your account has the \&quot;customer authorization\&quot; feature enabled (it is not enabled by default) jobs you create will be held in the \&quot;Authorizing\&quot; state until you call this method. Calling this method on a job that is not the \&quot;Authorizing\&quot; state has no effect and will return success. Please contact support@cielo24.com to enable the \&quot;customer authorization\&quot; feature.
        /// </remarks>
        /// <exception cref="cielo24.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v"></param>
        /// <param name="jobId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AuthorizeJobWithHttpInfoAsync(int v, string jobId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the caption file for a job. The job must have completed transcription before a caption can be downloaded.
        /// </remarks>
        /// <exception cref="cielo24.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v"></param>
        /// <param name="jobId"></param>
        /// <param name="captionFormat"></param>
        /// <param name="buildUrl">Rather than returning the file, return a permanent URL to the file. (optional, default to false)</param>
        /// <param name="captionWordsMin">Minimum number of words allowed in a caption. (optional, default to 1)</param>
        /// <param name="captionBySentence">When true, puts each sentence into its own caption. When false, more than one sentence may appear in a single caption. (optional, default to true)</param>
        /// <param name="charactersPerCaptionLine">Maximum number of characters to be displayed on each caption line. (optional, default to 42)</param>
        /// <param name="dfxpHeader">Allows you to specify a custom header for your DFXP caption file. The header should be the entire contents of the header including the opening and closing tags. Ignored if caption_format does not equal DFXP. (optional, default to &quot;&quot;)</param>
        /// <param name="disallowDangling">Will prevent captions from having the last word in a sentence start a new line. Last words will ALWAYS be kept on the same line, even if it breaks the characters_per_caption_line option. (optional, default to false)</param>
        /// <param name="displayEffectsSpeakerAs">Determines what speaker name should used for sound effects. (optional, default to &quot;Effects&quot;)</param>
        /// <param name="displaySpeakerId">Determines the way speakers are identified in the captions. Choose \&quot;no\&quot; to not display speaker identities at all: \&quot;&gt;&gt; example\&quot; Choose \&quot;number\&quot; to display only the speaker number: \&quot;&gt;&gt; Speaker 1: example\&quot; Choose \&quot;name\&quot; to display the speaker name: \&quot;&gt;&gt; John Doe: example\&quot;. If you choose \&quot;name\&quot;, the speaker number will be displayed if the name is not available. (optional, default to name)</param>
        /// <param name="iwpName">The named version of element list to generate the transcript from. If not specified, the transcript will be generated from the latest version. (optional)</param>
        /// <param name="elementlistVersion">The version of element list to generate the captions from. If not specified, the caption will be generated from the latest version. (ISO 8601 Date String) (optional, default to &quot;&quot;)</param>
        /// <param name="emitSpeakerChangeTokensAs">Determine what characters to use to denote speaker changes. (optional, default to &quot;&gt;&gt;&quot;)</param>
        /// <param name="forceCase">Force the contents of the captions to be all UPPER or lower case. If blank, the case of the captions is not changed. (optional)</param>
        /// <param name="includeDfxpMetadata">When true, and the caption format requested is DFXP, the jobs name, ID and language will be added to the DFXP metadata header. When false, these data are omitted from the header. Ignored if caption_format does not equal DFXP. (optional, default to true)</param>
        /// <param name="layoutTargetCaptionLengthMs">Captions generated will, on average, be this duration. However, they may vary significantly based on other parameters you set. (optional, default to 5000)</param>
        /// <param name="lineBreakOnSentence">Inserts a line break in between sentences that are in the same caption. (optional, default to false)</param>
        /// <param name="lineEndingFormat">Determine the end of line (EOL) character to use for the captions. (optional, default to UNIX)</param>
        /// <param name="linesPerCaption">Number of lines to be displayed for each caption. (optional, default to 2)</param>
        /// <param name="maskProfanity">Replace profanity with asterisks. (optional, default to false)</param>
        /// <param name="maximumCaptionDuration">No captions longer than this (in milliseconds) will be produced. If not specified, there is no maximum. (optional)</param>
        /// <param name="mergeGapInterval">Captions with a gap between them that is smaller than this (in milliseconds) will have their start and/or end times changed so there is no time gap between the captions. (optional, default to 1000)</param>
        /// <param name="minimumCaptionLengthMs">Extends the duration of short captions to the this minimum length. Additional time is taken from later caption blocks to meet this minimum time. (optional)</param>
        /// <param name="minimumGapBetweenCaptionsMs">Adds a minimum time between captions such as there will always be some time between captions where no text is displayed. When captions are very close together, time will be removed from the caption duration to make the gap. (optional)</param>
        /// <param name="qtSeamless">Does not put time gaps of any kind between caption blocks. Ignored if caption_format does not equal QT. (optional, default to false)</param>
        /// <param name="removeDisfluencies">Remove verbal disfluencies from the generated transcript. Common disfluencies such as \&quot;um\&quot; and \&quot;ah\&quot; are removed while maintaining appropriate punctuation. (optional, default to true)</param>
        /// <param name="removeSoundsList">A list of sounds to not show in the caption. This is a JSON style list, and should look like [\&quot;MUSIC\&quot;, \&quot;LAUGH\&quot;]. Ignored if remove_sound_references is true. (optional)</param>
        /// <param name="removeSoundReferences">Remove ALL non-verbal sound and noise references from the generated transcript. Sounds and unidentified noises are depicted in the caption as [SOUND], [COUGH] and [NOISE]. If this parameter is set, these identifiers are omitted from the caption. (optional, default to true)</param>
        /// <param name="replaceSlang">Replace common slang terms from the generated transcript. Common replacements are \&quot;want to\&quot; for \&quot;wanna\&quot;, \&quot;going to\&quot; for \&quot;gonna\&quot;, etc. (optional, default to false)</param>
        /// <param name="silenceMaxMs">If there is a interval of silence in the middle of a sentence longer than this, then the caption will be split. (optional, default to 2000)</param>
        /// <param name="singleSpeakerPerCaption">When true, puts each speaker into its own caption. When false, more than one speaker may appear in a single caption. (optional, default to true)</param>
        /// <param name="soundBoundaries">Specifies the characters to surround sound references with. The default will generate sound references that look like this: [MUSIC]. (optional)</param>
        /// <param name="soundThreshold">Sound references that are longer than this threshold will be made their own caption entirely, and will not have any text included with them. If not set, Sound references will be included back to back with text no matter the duration of the sound. (optional)</param>
        /// <param name="soundTokensByCaption">If true, all sound references will always be in their own caption. If false, more than one sound reference may appear in a single caption. (optional, default to false)</param>
        /// <param name="soundTokensByLine">If true, all sound references will always be in their own line. If false, more than one sound reference may appear in a single line. (optional, default to false)</param>
        /// <param name="soundTokensByCaptionList">If non-empty, the specified sound references will always be in their own caption. If empty, more than one sound reference may appear in a single caption. Ignored if sound_tokens_by_caption is true. (optional)</param>
        /// <param name="soundTokensByLineList">If non-empty, the specified sound references will always be in their own line. If empty, more than one sound reference may appear in a single line. Ignored if sound_tokens_by_line is true. (optional)</param>
        /// <param name="speakerOnNewLine">If true, a speaker change will cause a new caption to be made. If false, multiple speakers may appear in a single caption. (optional, default to true)</param>
        /// <param name="srtFormat">If the caption format is SRT, determines what the caption blocks will look like. The default, prints caption blocks that look like this:    1:   00:00:06,060 - -&gt; 00:00:16,060   This is the caption text.  You can alter the caption block by re-arranging or removing the substitution string values, shown enclosed in braces \&quot;{}\&quot; in the default value below. Substitution strings may used more than once if desired. Any text that is not a substitution string will be displayed as written. To add new lines, include a \\n. Note, you may need to escape the \\n with an extra backslash when encoding the request.  (optional, default to &quot;{caption_number:d}\n{start_hour:02d}:{start_minute:02d}:{start_second:02d},{start_millisecond:03d} --&gt;{end_hour:02d}:{end_minute:02d}:{end_second:02d},{end_millisecond:03d}\n{caption_text}\n\n&quot;)</param>
        /// <param name="stripSquareBrackets">Removes all square brackets like &#39;[&#39; or &#39;]&#39; from captions. By default square brackets surround sound references like &#39;[MUSIC]&#39;, but they may exist as part of the caption text as well. (optional, default to false)</param>
        /// <param name="utf8Mark">Adds a utf8 bytemark to the beginning of the caption. This should only be used if the system you are loading the caption files into needs a byte marker. The vast majority of systems do not. (optional, default to false)</param>
        /// <param name="replaceEnglishSpelling">Replaces English spelling with location accurate spelling. i.e. Color - -&gt; Colour  A: American  B: British  Z: British ize  U: Australian  C: Canadian  (optional, default to A)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> GetCaptionAsync(int v, string jobId, string captionFormat, string buildUrl = default(string), int? captionWordsMin = default(int?), string captionBySentence = default(string), int? charactersPerCaptionLine = default(int?), string dfxpHeader = default(string), string disallowDangling = default(string), string displayEffectsSpeakerAs = default(string), string displaySpeakerId = default(string), string iwpName = default(string), string elementlistVersion = default(string), string emitSpeakerChangeTokensAs = default(string), string forceCase = default(string), string includeDfxpMetadata = default(string), int? layoutTargetCaptionLengthMs = default(int?), string lineBreakOnSentence = default(string), string lineEndingFormat = default(string), int? linesPerCaption = default(int?), string maskProfanity = default(string), int? maximumCaptionDuration = default(int?), int? mergeGapInterval = default(int?), int? minimumCaptionLengthMs = default(int?), int? minimumGapBetweenCaptionsMs = default(int?), string qtSeamless = default(string), string removeDisfluencies = default(string), List<string> removeSoundsList = default(List<string>), string removeSoundReferences = default(string), string replaceSlang = default(string), int? silenceMaxMs = default(int?), string singleSpeakerPerCaption = default(string), List<string> soundBoundaries = default(List<string>), int? soundThreshold = default(int?), string soundTokensByCaption = default(string), string soundTokensByLine = default(string), List<string> soundTokensByCaptionList = default(List<string>), List<string> soundTokensByLineList = default(List<string>), string speakerOnNewLine = default(string), string srtFormat = default(string), string stripSquareBrackets = default(string), string utf8Mark = default(string), string replaceEnglishSpelling = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the caption file for a job. The job must have completed transcription before a caption can be downloaded.
        /// </remarks>
        /// <exception cref="cielo24.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v"></param>
        /// <param name="jobId"></param>
        /// <param name="captionFormat"></param>
        /// <param name="buildUrl">Rather than returning the file, return a permanent URL to the file. (optional, default to false)</param>
        /// <param name="captionWordsMin">Minimum number of words allowed in a caption. (optional, default to 1)</param>
        /// <param name="captionBySentence">When true, puts each sentence into its own caption. When false, more than one sentence may appear in a single caption. (optional, default to true)</param>
        /// <param name="charactersPerCaptionLine">Maximum number of characters to be displayed on each caption line. (optional, default to 42)</param>
        /// <param name="dfxpHeader">Allows you to specify a custom header for your DFXP caption file. The header should be the entire contents of the header including the opening and closing tags. Ignored if caption_format does not equal DFXP. (optional, default to &quot;&quot;)</param>
        /// <param name="disallowDangling">Will prevent captions from having the last word in a sentence start a new line. Last words will ALWAYS be kept on the same line, even if it breaks the characters_per_caption_line option. (optional, default to false)</param>
        /// <param name="displayEffectsSpeakerAs">Determines what speaker name should used for sound effects. (optional, default to &quot;Effects&quot;)</param>
        /// <param name="displaySpeakerId">Determines the way speakers are identified in the captions. Choose \&quot;no\&quot; to not display speaker identities at all: \&quot;&gt;&gt; example\&quot; Choose \&quot;number\&quot; to display only the speaker number: \&quot;&gt;&gt; Speaker 1: example\&quot; Choose \&quot;name\&quot; to display the speaker name: \&quot;&gt;&gt; John Doe: example\&quot;. If you choose \&quot;name\&quot;, the speaker number will be displayed if the name is not available. (optional, default to name)</param>
        /// <param name="iwpName">The named version of element list to generate the transcript from. If not specified, the transcript will be generated from the latest version. (optional)</param>
        /// <param name="elementlistVersion">The version of element list to generate the captions from. If not specified, the caption will be generated from the latest version. (ISO 8601 Date String) (optional, default to &quot;&quot;)</param>
        /// <param name="emitSpeakerChangeTokensAs">Determine what characters to use to denote speaker changes. (optional, default to &quot;&gt;&gt;&quot;)</param>
        /// <param name="forceCase">Force the contents of the captions to be all UPPER or lower case. If blank, the case of the captions is not changed. (optional)</param>
        /// <param name="includeDfxpMetadata">When true, and the caption format requested is DFXP, the jobs name, ID and language will be added to the DFXP metadata header. When false, these data are omitted from the header. Ignored if caption_format does not equal DFXP. (optional, default to true)</param>
        /// <param name="layoutTargetCaptionLengthMs">Captions generated will, on average, be this duration. However, they may vary significantly based on other parameters you set. (optional, default to 5000)</param>
        /// <param name="lineBreakOnSentence">Inserts a line break in between sentences that are in the same caption. (optional, default to false)</param>
        /// <param name="lineEndingFormat">Determine the end of line (EOL) character to use for the captions. (optional, default to UNIX)</param>
        /// <param name="linesPerCaption">Number of lines to be displayed for each caption. (optional, default to 2)</param>
        /// <param name="maskProfanity">Replace profanity with asterisks. (optional, default to false)</param>
        /// <param name="maximumCaptionDuration">No captions longer than this (in milliseconds) will be produced. If not specified, there is no maximum. (optional)</param>
        /// <param name="mergeGapInterval">Captions with a gap between them that is smaller than this (in milliseconds) will have their start and/or end times changed so there is no time gap between the captions. (optional, default to 1000)</param>
        /// <param name="minimumCaptionLengthMs">Extends the duration of short captions to the this minimum length. Additional time is taken from later caption blocks to meet this minimum time. (optional)</param>
        /// <param name="minimumGapBetweenCaptionsMs">Adds a minimum time between captions such as there will always be some time between captions where no text is displayed. When captions are very close together, time will be removed from the caption duration to make the gap. (optional)</param>
        /// <param name="qtSeamless">Does not put time gaps of any kind between caption blocks. Ignored if caption_format does not equal QT. (optional, default to false)</param>
        /// <param name="removeDisfluencies">Remove verbal disfluencies from the generated transcript. Common disfluencies such as \&quot;um\&quot; and \&quot;ah\&quot; are removed while maintaining appropriate punctuation. (optional, default to true)</param>
        /// <param name="removeSoundsList">A list of sounds to not show in the caption. This is a JSON style list, and should look like [\&quot;MUSIC\&quot;, \&quot;LAUGH\&quot;]. Ignored if remove_sound_references is true. (optional)</param>
        /// <param name="removeSoundReferences">Remove ALL non-verbal sound and noise references from the generated transcript. Sounds and unidentified noises are depicted in the caption as [SOUND], [COUGH] and [NOISE]. If this parameter is set, these identifiers are omitted from the caption. (optional, default to true)</param>
        /// <param name="replaceSlang">Replace common slang terms from the generated transcript. Common replacements are \&quot;want to\&quot; for \&quot;wanna\&quot;, \&quot;going to\&quot; for \&quot;gonna\&quot;, etc. (optional, default to false)</param>
        /// <param name="silenceMaxMs">If there is a interval of silence in the middle of a sentence longer than this, then the caption will be split. (optional, default to 2000)</param>
        /// <param name="singleSpeakerPerCaption">When true, puts each speaker into its own caption. When false, more than one speaker may appear in a single caption. (optional, default to true)</param>
        /// <param name="soundBoundaries">Specifies the characters to surround sound references with. The default will generate sound references that look like this: [MUSIC]. (optional)</param>
        /// <param name="soundThreshold">Sound references that are longer than this threshold will be made their own caption entirely, and will not have any text included with them. If not set, Sound references will be included back to back with text no matter the duration of the sound. (optional)</param>
        /// <param name="soundTokensByCaption">If true, all sound references will always be in their own caption. If false, more than one sound reference may appear in a single caption. (optional, default to false)</param>
        /// <param name="soundTokensByLine">If true, all sound references will always be in their own line. If false, more than one sound reference may appear in a single line. (optional, default to false)</param>
        /// <param name="soundTokensByCaptionList">If non-empty, the specified sound references will always be in their own caption. If empty, more than one sound reference may appear in a single caption. Ignored if sound_tokens_by_caption is true. (optional)</param>
        /// <param name="soundTokensByLineList">If non-empty, the specified sound references will always be in their own line. If empty, more than one sound reference may appear in a single line. Ignored if sound_tokens_by_line is true. (optional)</param>
        /// <param name="speakerOnNewLine">If true, a speaker change will cause a new caption to be made. If false, multiple speakers may appear in a single caption. (optional, default to true)</param>
        /// <param name="srtFormat">If the caption format is SRT, determines what the caption blocks will look like. The default, prints caption blocks that look like this:    1:   00:00:06,060 - -&gt; 00:00:16,060   This is the caption text.  You can alter the caption block by re-arranging or removing the substitution string values, shown enclosed in braces \&quot;{}\&quot; in the default value below. Substitution strings may used more than once if desired. Any text that is not a substitution string will be displayed as written. To add new lines, include a \\n. Note, you may need to escape the \\n with an extra backslash when encoding the request.  (optional, default to &quot;{caption_number:d}\n{start_hour:02d}:{start_minute:02d}:{start_second:02d},{start_millisecond:03d} --&gt;{end_hour:02d}:{end_minute:02d}:{end_second:02d},{end_millisecond:03d}\n{caption_text}\n\n&quot;)</param>
        /// <param name="stripSquareBrackets">Removes all square brackets like &#39;[&#39; or &#39;]&#39; from captions. By default square brackets surround sound references like &#39;[MUSIC]&#39;, but they may exist as part of the caption text as well. (optional, default to false)</param>
        /// <param name="utf8Mark">Adds a utf8 bytemark to the beginning of the caption. This should only be used if the system you are loading the caption files into needs a byte marker. The vast majority of systems do not. (optional, default to false)</param>
        /// <param name="replaceEnglishSpelling">Replaces English spelling with location accurate spelling. i.e. Color - -&gt; Colour  A: American  B: British  Z: British ize  U: Australian  C: Canadian  (optional, default to A)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetCaptionWithHttpInfoAsync(int v, string jobId, string captionFormat, string buildUrl = default(string), int? captionWordsMin = default(int?), string captionBySentence = default(string), int? charactersPerCaptionLine = default(int?), string dfxpHeader = default(string), string disallowDangling = default(string), string displayEffectsSpeakerAs = default(string), string displaySpeakerId = default(string), string iwpName = default(string), string elementlistVersion = default(string), string emitSpeakerChangeTokensAs = default(string), string forceCase = default(string), string includeDfxpMetadata = default(string), int? layoutTargetCaptionLengthMs = default(int?), string lineBreakOnSentence = default(string), string lineEndingFormat = default(string), int? linesPerCaption = default(int?), string maskProfanity = default(string), int? maximumCaptionDuration = default(int?), int? mergeGapInterval = default(int?), int? minimumCaptionLengthMs = default(int?), int? minimumGapBetweenCaptionsMs = default(int?), string qtSeamless = default(string), string removeDisfluencies = default(string), List<string> removeSoundsList = default(List<string>), string removeSoundReferences = default(string), string replaceSlang = default(string), int? silenceMaxMs = default(int?), string singleSpeakerPerCaption = default(string), List<string> soundBoundaries = default(List<string>), int? soundThreshold = default(int?), string soundTokensByCaption = default(string), string soundTokensByLine = default(string), List<string> soundTokensByCaptionList = default(List<string>), List<string> soundTokensByLineList = default(List<string>), string speakerOnNewLine = default(string), string srtFormat = default(string), string stripSquareBrackets = default(string), string utf8Mark = default(string), string replaceEnglishSpelling = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cielo24.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v"></param>
        /// <param name="jobId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JobInfoResponse</returns>
        System.Threading.Tasks.Task<JobInfoResponse> JobInfoAsync(int v, string jobId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cielo24.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v"></param>
        /// <param name="jobId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JobInfoResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<JobInfoResponse>> JobInfoWithHttpInfoAsync(int v, string jobId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a new job. A job is a container into which you can upload media and request that transcription be performed. Creating a job is prerequisite for virtually all other methods.
        /// </remarks>
        /// <exception cref="cielo24.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v"></param>
        /// <param name="newJobBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NewJobResponse</returns>
        System.Threading.Tasks.Task<NewJobResponse> NewJobAsync(int v, NewJobBody newJobBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a new job. A job is a container into which you can upload media and request that transcription be performed. Creating a job is prerequisite for virtually all other methods.
        /// </remarks>
        /// <exception cref="cielo24.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v"></param>
        /// <param name="newJobBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NewJobResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<NewJobResponse>> NewJobWithHttpInfoAsync(int v, NewJobBody newJobBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Request that transcription be performed on the specified job. A callback URL, if specified, will be called when the transcription is complete. See [callback documentation](https://cielo24.readthedocs.io/en/latest/basics.html#callbacks-label) for details.
        /// </remarks>
        /// <exception cref="cielo24.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v"></param>
        /// <param name="performTranscriptionBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PerformTranscriptionResponse</returns>
        System.Threading.Tasks.Task<PerformTranscriptionResponse> PerformTranscriptionAsync(int v, PerformTranscriptionBody performTranscriptionBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Request that transcription be performed on the specified job. A callback URL, if specified, will be called when the transcription is complete. See [callback documentation](https://cielo24.readthedocs.io/en/latest/basics.html#callbacks-label) for details.
        /// </remarks>
        /// <exception cref="cielo24.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v"></param>
        /// <param name="performTranscriptionBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PerformTranscriptionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PerformTranscriptionResponse>> PerformTranscriptionWithHttpInfoAsync(int v, PerformTranscriptionBody performTranscriptionBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Request that orders a new Translation language for a video that has been previously Transcribed and/or Translated. The New Job ID and job target language will be returned upon completion.
        /// </remarks>
        /// <exception cref="cielo24.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v"></param>
        /// <param name="jobId"></param>
        /// <param name="targetLanguages">The language(s) being ordered (Any RFC 5646 language code) separated by comma (,)</param>
        /// <param name="approveUplevel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PerformTranslationResponse</returns>
        System.Threading.Tasks.Task<PerformTranslationResponse> PerformTranslationAsync(int v, string jobId, string targetLanguages, string approveUplevel = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Request that orders a new Translation language for a video that has been previously Transcribed and/or Translated. The New Job ID and job target language will be returned upon completion.
        /// </remarks>
        /// <exception cref="cielo24.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v"></param>
        /// <param name="jobId"></param>
        /// <param name="targetLanguages">The language(s) being ordered (Any RFC 5646 language code) separated by comma (,)</param>
        /// <param name="approveUplevel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PerformTranslationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PerformTranslationResponse>> PerformTranslationWithHttpInfoAsync(int v, string jobId, string targetLanguages, string approveUplevel = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IJobApi : IJobApiSync, IJobApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class JobApi : IJobApi
    {
        private cielo24.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="JobApi"/> class.
        /// </summary>
        /// <returns></returns>
        public JobApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="JobApi"/> class.
        /// </summary>
        /// <returns></returns>
        public JobApi(string basePath)
        {
            this.Configuration = cielo24.Client.Configuration.MergeConfigurations(
                cielo24.Client.GlobalConfiguration.Instance,
                new cielo24.Client.Configuration { BasePath = basePath }
            );
            this.Client = new cielo24.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new cielo24.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = cielo24.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="JobApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public JobApi(cielo24.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = cielo24.Client.Configuration.MergeConfigurations(
                cielo24.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new cielo24.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new cielo24.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = cielo24.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="JobApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public JobApi(cielo24.Client.ISynchronousClient client, cielo24.Client.IAsynchronousClient asyncClient, cielo24.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = cielo24.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public cielo24.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public cielo24.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public cielo24.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public cielo24.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  Add a piece of media to an existing job using a local file. No content-type should be included in the HTTP header. The media should be uploaded as raw binary, no encoding (base64, hex, etc) is required. Chunk-transfer encoding is NOT supported. File size is limited to 10 gb
        /// </summary>
        /// <exception cref="cielo24.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v"></param>
        /// <param name="jobId"></param>
        /// <param name="contentLength"></param>
        /// <param name="body"></param>
        /// <param name="isDuplicate"> (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AddMediaResponse</returns>
        public AddMediaResponse AddMediaFile(int v, string jobId, int contentLength, System.IO.Stream body, string isDuplicate = default(string), int operationIndex = 0)
        {
            cielo24.Client.ApiResponse<AddMediaResponse> localVarResponse = AddMediaFileWithHttpInfo(v, jobId, contentLength, body, isDuplicate);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Add a piece of media to an existing job using a local file. No content-type should be included in the HTTP header. The media should be uploaded as raw binary, no encoding (base64, hex, etc) is required. Chunk-transfer encoding is NOT supported. File size is limited to 10 gb
        /// </summary>
        /// <exception cref="cielo24.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v"></param>
        /// <param name="jobId"></param>
        /// <param name="contentLength"></param>
        /// <param name="body"></param>
        /// <param name="isDuplicate"> (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AddMediaResponse</returns>
        public cielo24.Client.ApiResponse<AddMediaResponse> AddMediaFileWithHttpInfo(int v, string jobId, int contentLength, System.IO.Stream body, string isDuplicate = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'jobId' is set
            if (jobId == null)
            {
                throw new cielo24.Client.ApiException(400, "Missing required parameter 'jobId' when calling JobApi->AddMediaFile");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new cielo24.Client.ApiException(400, "Missing required parameter 'body' when calling JobApi->AddMediaFile");
            }

            cielo24.Client.RequestOptions localVarRequestOptions = new cielo24.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "video/mp4"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cielo24.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cielo24.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "v", v));
            localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "job_id", jobId));
            if (isDuplicate != null)
            {
                localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "is_duplicate", isDuplicate));
            }
            localVarRequestOptions.HeaderParameters.Add("Content-Length", cielo24.Client.ClientUtils.ParameterToString(contentLength)); // header parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "JobApi.AddMediaFile";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_token")))
            {
                localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "api_token", this.Configuration.GetApiKeyWithPrefix("api_token")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AddMediaResponse>("/job/add_media", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddMediaFile", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Add a piece of media to an existing job using a local file. No content-type should be included in the HTTP header. The media should be uploaded as raw binary, no encoding (base64, hex, etc) is required. Chunk-transfer encoding is NOT supported. File size is limited to 10 gb
        /// </summary>
        /// <exception cref="cielo24.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v"></param>
        /// <param name="jobId"></param>
        /// <param name="contentLength"></param>
        /// <param name="body"></param>
        /// <param name="isDuplicate"> (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AddMediaResponse</returns>
        public async System.Threading.Tasks.Task<AddMediaResponse> AddMediaFileAsync(int v, string jobId, int contentLength, System.IO.Stream body, string isDuplicate = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            cielo24.Client.ApiResponse<AddMediaResponse> localVarResponse = await AddMediaFileWithHttpInfoAsync(v, jobId, contentLength, body, isDuplicate, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Add a piece of media to an existing job using a local file. No content-type should be included in the HTTP header. The media should be uploaded as raw binary, no encoding (base64, hex, etc) is required. Chunk-transfer encoding is NOT supported. File size is limited to 10 gb
        /// </summary>
        /// <exception cref="cielo24.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v"></param>
        /// <param name="jobId"></param>
        /// <param name="contentLength"></param>
        /// <param name="body"></param>
        /// <param name="isDuplicate"> (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AddMediaResponse)</returns>
        public async System.Threading.Tasks.Task<cielo24.Client.ApiResponse<AddMediaResponse>> AddMediaFileWithHttpInfoAsync(int v, string jobId, int contentLength, System.IO.Stream body, string isDuplicate = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'jobId' is set
            if (jobId == null)
            {
                throw new cielo24.Client.ApiException(400, "Missing required parameter 'jobId' when calling JobApi->AddMediaFile");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new cielo24.Client.ApiException(400, "Missing required parameter 'body' when calling JobApi->AddMediaFile");
            }


            cielo24.Client.RequestOptions localVarRequestOptions = new cielo24.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "video/mp4"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cielo24.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cielo24.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "v", v));
            localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "job_id", jobId));
            if (isDuplicate != null)
            {
                localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "is_duplicate", isDuplicate));
            }
            localVarRequestOptions.HeaderParameters.Add("Content-Length", cielo24.Client.ClientUtils.ParameterToString(contentLength)); // header parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "JobApi.AddMediaFile";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_token")))
            {
                localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "api_token", this.Configuration.GetApiKeyWithPrefix("api_token")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AddMediaResponse>("/job/add_media", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddMediaFile", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Add a piece of media to an existing job using a public media url. A job may only have a single piece of media associated with it, attempting to add additional media will return an error code.
        /// </summary>
        /// <exception cref="cielo24.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v"></param>
        /// <param name="jobId"></param>
        /// <param name="mediaUrl"></param>
        /// <param name="isDuplicate"> (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AddMediaResponse</returns>
        public AddMediaResponse AddMediaUrl(int v, string jobId, string mediaUrl, string isDuplicate = default(string), int operationIndex = 0)
        {
            cielo24.Client.ApiResponse<AddMediaResponse> localVarResponse = AddMediaUrlWithHttpInfo(v, jobId, mediaUrl, isDuplicate);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Add a piece of media to an existing job using a public media url. A job may only have a single piece of media associated with it, attempting to add additional media will return an error code.
        /// </summary>
        /// <exception cref="cielo24.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v"></param>
        /// <param name="jobId"></param>
        /// <param name="mediaUrl"></param>
        /// <param name="isDuplicate"> (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AddMediaResponse</returns>
        public cielo24.Client.ApiResponse<AddMediaResponse> AddMediaUrlWithHttpInfo(int v, string jobId, string mediaUrl, string isDuplicate = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'jobId' is set
            if (jobId == null)
            {
                throw new cielo24.Client.ApiException(400, "Missing required parameter 'jobId' when calling JobApi->AddMediaUrl");
            }

            // verify the required parameter 'mediaUrl' is set
            if (mediaUrl == null)
            {
                throw new cielo24.Client.ApiException(400, "Missing required parameter 'mediaUrl' when calling JobApi->AddMediaUrl");
            }

            cielo24.Client.RequestOptions localVarRequestOptions = new cielo24.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cielo24.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cielo24.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "v", v));
            localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "job_id", jobId));
            localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "media_url", mediaUrl));
            if (isDuplicate != null)
            {
                localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "is_duplicate", isDuplicate));
            }

            localVarRequestOptions.Operation = "JobApi.AddMediaUrl";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_token")))
            {
                localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "api_token", this.Configuration.GetApiKeyWithPrefix("api_token")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AddMediaResponse>("/job/add_media", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddMediaUrl", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Add a piece of media to an existing job using a public media url. A job may only have a single piece of media associated with it, attempting to add additional media will return an error code.
        /// </summary>
        /// <exception cref="cielo24.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v"></param>
        /// <param name="jobId"></param>
        /// <param name="mediaUrl"></param>
        /// <param name="isDuplicate"> (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AddMediaResponse</returns>
        public async System.Threading.Tasks.Task<AddMediaResponse> AddMediaUrlAsync(int v, string jobId, string mediaUrl, string isDuplicate = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            cielo24.Client.ApiResponse<AddMediaResponse> localVarResponse = await AddMediaUrlWithHttpInfoAsync(v, jobId, mediaUrl, isDuplicate, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Add a piece of media to an existing job using a public media url. A job may only have a single piece of media associated with it, attempting to add additional media will return an error code.
        /// </summary>
        /// <exception cref="cielo24.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v"></param>
        /// <param name="jobId"></param>
        /// <param name="mediaUrl"></param>
        /// <param name="isDuplicate"> (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AddMediaResponse)</returns>
        public async System.Threading.Tasks.Task<cielo24.Client.ApiResponse<AddMediaResponse>> AddMediaUrlWithHttpInfoAsync(int v, string jobId, string mediaUrl, string isDuplicate = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'jobId' is set
            if (jobId == null)
            {
                throw new cielo24.Client.ApiException(400, "Missing required parameter 'jobId' when calling JobApi->AddMediaUrl");
            }

            // verify the required parameter 'mediaUrl' is set
            if (mediaUrl == null)
            {
                throw new cielo24.Client.ApiException(400, "Missing required parameter 'mediaUrl' when calling JobApi->AddMediaUrl");
            }


            cielo24.Client.RequestOptions localVarRequestOptions = new cielo24.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cielo24.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cielo24.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "v", v));
            localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "job_id", jobId));
            localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "media_url", mediaUrl));
            if (isDuplicate != null)
            {
                localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "is_duplicate", isDuplicate));
            }

            localVarRequestOptions.Operation = "JobApi.AddMediaUrl";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_token")))
            {
                localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "api_token", this.Configuration.GetApiKeyWithPrefix("api_token")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AddMediaResponse>("/job/add_media", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddMediaUrl", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Authorize an existing job. If your account has the \&quot;customer authorization\&quot; feature enabled (it is not enabled by default) jobs you create will be held in the \&quot;Authorizing\&quot; state until you call this method. Calling this method on a job that is not the \&quot;Authorizing\&quot; state has no effect and will return success. Please contact support@cielo24.com to enable the \&quot;customer authorization\&quot; feature.
        /// </summary>
        /// <exception cref="cielo24.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v"></param>
        /// <param name="jobId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void AuthorizeJob(int v, string jobId, int operationIndex = 0)
        {
            AuthorizeJobWithHttpInfo(v, jobId);
        }

        /// <summary>
        ///  Authorize an existing job. If your account has the \&quot;customer authorization\&quot; feature enabled (it is not enabled by default) jobs you create will be held in the \&quot;Authorizing\&quot; state until you call this method. Calling this method on a job that is not the \&quot;Authorizing\&quot; state has no effect and will return success. Please contact support@cielo24.com to enable the \&quot;customer authorization\&quot; feature.
        /// </summary>
        /// <exception cref="cielo24.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v"></param>
        /// <param name="jobId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public cielo24.Client.ApiResponse<Object> AuthorizeJobWithHttpInfo(int v, string jobId, int operationIndex = 0)
        {
            // verify the required parameter 'jobId' is set
            if (jobId == null)
            {
                throw new cielo24.Client.ApiException(400, "Missing required parameter 'jobId' when calling JobApi->AuthorizeJob");
            }

            cielo24.Client.RequestOptions localVarRequestOptions = new cielo24.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cielo24.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cielo24.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "v", v));
            localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "job_id", jobId));

            localVarRequestOptions.Operation = "JobApi.AuthorizeJob";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_token")))
            {
                localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "api_token", this.Configuration.GetApiKeyWithPrefix("api_token")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/job/authorize", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthorizeJob", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Authorize an existing job. If your account has the \&quot;customer authorization\&quot; feature enabled (it is not enabled by default) jobs you create will be held in the \&quot;Authorizing\&quot; state until you call this method. Calling this method on a job that is not the \&quot;Authorizing\&quot; state has no effect and will return success. Please contact support@cielo24.com to enable the \&quot;customer authorization\&quot; feature.
        /// </summary>
        /// <exception cref="cielo24.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v"></param>
        /// <param name="jobId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AuthorizeJobAsync(int v, string jobId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await AuthorizeJobWithHttpInfoAsync(v, jobId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  Authorize an existing job. If your account has the \&quot;customer authorization\&quot; feature enabled (it is not enabled by default) jobs you create will be held in the \&quot;Authorizing\&quot; state until you call this method. Calling this method on a job that is not the \&quot;Authorizing\&quot; state has no effect and will return success. Please contact support@cielo24.com to enable the \&quot;customer authorization\&quot; feature.
        /// </summary>
        /// <exception cref="cielo24.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v"></param>
        /// <param name="jobId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<cielo24.Client.ApiResponse<Object>> AuthorizeJobWithHttpInfoAsync(int v, string jobId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'jobId' is set
            if (jobId == null)
            {
                throw new cielo24.Client.ApiException(400, "Missing required parameter 'jobId' when calling JobApi->AuthorizeJob");
            }


            cielo24.Client.RequestOptions localVarRequestOptions = new cielo24.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cielo24.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cielo24.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "v", v));
            localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "job_id", jobId));

            localVarRequestOptions.Operation = "JobApi.AuthorizeJob";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_token")))
            {
                localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "api_token", this.Configuration.GetApiKeyWithPrefix("api_token")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/job/authorize", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthorizeJob", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get the caption file for a job. The job must have completed transcription before a caption can be downloaded.
        /// </summary>
        /// <exception cref="cielo24.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v"></param>
        /// <param name="jobId"></param>
        /// <param name="captionFormat"></param>
        /// <param name="buildUrl">Rather than returning the file, return a permanent URL to the file. (optional, default to false)</param>
        /// <param name="captionWordsMin">Minimum number of words allowed in a caption. (optional, default to 1)</param>
        /// <param name="captionBySentence">When true, puts each sentence into its own caption. When false, more than one sentence may appear in a single caption. (optional, default to true)</param>
        /// <param name="charactersPerCaptionLine">Maximum number of characters to be displayed on each caption line. (optional, default to 42)</param>
        /// <param name="dfxpHeader">Allows you to specify a custom header for your DFXP caption file. The header should be the entire contents of the header including the opening and closing tags. Ignored if caption_format does not equal DFXP. (optional, default to &quot;&quot;)</param>
        /// <param name="disallowDangling">Will prevent captions from having the last word in a sentence start a new line. Last words will ALWAYS be kept on the same line, even if it breaks the characters_per_caption_line option. (optional, default to false)</param>
        /// <param name="displayEffectsSpeakerAs">Determines what speaker name should used for sound effects. (optional, default to &quot;Effects&quot;)</param>
        /// <param name="displaySpeakerId">Determines the way speakers are identified in the captions. Choose \&quot;no\&quot; to not display speaker identities at all: \&quot;&gt;&gt; example\&quot; Choose \&quot;number\&quot; to display only the speaker number: \&quot;&gt;&gt; Speaker 1: example\&quot; Choose \&quot;name\&quot; to display the speaker name: \&quot;&gt;&gt; John Doe: example\&quot;. If you choose \&quot;name\&quot;, the speaker number will be displayed if the name is not available. (optional, default to name)</param>
        /// <param name="iwpName">The named version of element list to generate the transcript from. If not specified, the transcript will be generated from the latest version. (optional)</param>
        /// <param name="elementlistVersion">The version of element list to generate the captions from. If not specified, the caption will be generated from the latest version. (ISO 8601 Date String) (optional, default to &quot;&quot;)</param>
        /// <param name="emitSpeakerChangeTokensAs">Determine what characters to use to denote speaker changes. (optional, default to &quot;&gt;&gt;&quot;)</param>
        /// <param name="forceCase">Force the contents of the captions to be all UPPER or lower case. If blank, the case of the captions is not changed. (optional)</param>
        /// <param name="includeDfxpMetadata">When true, and the caption format requested is DFXP, the jobs name, ID and language will be added to the DFXP metadata header. When false, these data are omitted from the header. Ignored if caption_format does not equal DFXP. (optional, default to true)</param>
        /// <param name="layoutTargetCaptionLengthMs">Captions generated will, on average, be this duration. However, they may vary significantly based on other parameters you set. (optional, default to 5000)</param>
        /// <param name="lineBreakOnSentence">Inserts a line break in between sentences that are in the same caption. (optional, default to false)</param>
        /// <param name="lineEndingFormat">Determine the end of line (EOL) character to use for the captions. (optional, default to UNIX)</param>
        /// <param name="linesPerCaption">Number of lines to be displayed for each caption. (optional, default to 2)</param>
        /// <param name="maskProfanity">Replace profanity with asterisks. (optional, default to false)</param>
        /// <param name="maximumCaptionDuration">No captions longer than this (in milliseconds) will be produced. If not specified, there is no maximum. (optional)</param>
        /// <param name="mergeGapInterval">Captions with a gap between them that is smaller than this (in milliseconds) will have their start and/or end times changed so there is no time gap between the captions. (optional, default to 1000)</param>
        /// <param name="minimumCaptionLengthMs">Extends the duration of short captions to the this minimum length. Additional time is taken from later caption blocks to meet this minimum time. (optional)</param>
        /// <param name="minimumGapBetweenCaptionsMs">Adds a minimum time between captions such as there will always be some time between captions where no text is displayed. When captions are very close together, time will be removed from the caption duration to make the gap. (optional)</param>
        /// <param name="qtSeamless">Does not put time gaps of any kind between caption blocks. Ignored if caption_format does not equal QT. (optional, default to false)</param>
        /// <param name="removeDisfluencies">Remove verbal disfluencies from the generated transcript. Common disfluencies such as \&quot;um\&quot; and \&quot;ah\&quot; are removed while maintaining appropriate punctuation. (optional, default to true)</param>
        /// <param name="removeSoundsList">A list of sounds to not show in the caption. This is a JSON style list, and should look like [\&quot;MUSIC\&quot;, \&quot;LAUGH\&quot;]. Ignored if remove_sound_references is true. (optional)</param>
        /// <param name="removeSoundReferences">Remove ALL non-verbal sound and noise references from the generated transcript. Sounds and unidentified noises are depicted in the caption as [SOUND], [COUGH] and [NOISE]. If this parameter is set, these identifiers are omitted from the caption. (optional, default to true)</param>
        /// <param name="replaceSlang">Replace common slang terms from the generated transcript. Common replacements are \&quot;want to\&quot; for \&quot;wanna\&quot;, \&quot;going to\&quot; for \&quot;gonna\&quot;, etc. (optional, default to false)</param>
        /// <param name="silenceMaxMs">If there is a interval of silence in the middle of a sentence longer than this, then the caption will be split. (optional, default to 2000)</param>
        /// <param name="singleSpeakerPerCaption">When true, puts each speaker into its own caption. When false, more than one speaker may appear in a single caption. (optional, default to true)</param>
        /// <param name="soundBoundaries">Specifies the characters to surround sound references with. The default will generate sound references that look like this: [MUSIC]. (optional)</param>
        /// <param name="soundThreshold">Sound references that are longer than this threshold will be made their own caption entirely, and will not have any text included with them. If not set, Sound references will be included back to back with text no matter the duration of the sound. (optional)</param>
        /// <param name="soundTokensByCaption">If true, all sound references will always be in their own caption. If false, more than one sound reference may appear in a single caption. (optional, default to false)</param>
        /// <param name="soundTokensByLine">If true, all sound references will always be in their own line. If false, more than one sound reference may appear in a single line. (optional, default to false)</param>
        /// <param name="soundTokensByCaptionList">If non-empty, the specified sound references will always be in their own caption. If empty, more than one sound reference may appear in a single caption. Ignored if sound_tokens_by_caption is true. (optional)</param>
        /// <param name="soundTokensByLineList">If non-empty, the specified sound references will always be in their own line. If empty, more than one sound reference may appear in a single line. Ignored if sound_tokens_by_line is true. (optional)</param>
        /// <param name="speakerOnNewLine">If true, a speaker change will cause a new caption to be made. If false, multiple speakers may appear in a single caption. (optional, default to true)</param>
        /// <param name="srtFormat">If the caption format is SRT, determines what the caption blocks will look like. The default, prints caption blocks that look like this:    1:   00:00:06,060 - -&gt; 00:00:16,060   This is the caption text.  You can alter the caption block by re-arranging or removing the substitution string values, shown enclosed in braces \&quot;{}\&quot; in the default value below. Substitution strings may used more than once if desired. Any text that is not a substitution string will be displayed as written. To add new lines, include a \\n. Note, you may need to escape the \\n with an extra backslash when encoding the request.  (optional, default to &quot;{caption_number:d}\n{start_hour:02d}:{start_minute:02d}:{start_second:02d},{start_millisecond:03d} --&gt;{end_hour:02d}:{end_minute:02d}:{end_second:02d},{end_millisecond:03d}\n{caption_text}\n\n&quot;)</param>
        /// <param name="stripSquareBrackets">Removes all square brackets like &#39;[&#39; or &#39;]&#39; from captions. By default square brackets surround sound references like &#39;[MUSIC]&#39;, but they may exist as part of the caption text as well. (optional, default to false)</param>
        /// <param name="utf8Mark">Adds a utf8 bytemark to the beginning of the caption. This should only be used if the system you are loading the caption files into needs a byte marker. The vast majority of systems do not. (optional, default to false)</param>
        /// <param name="replaceEnglishSpelling">Replaces English spelling with location accurate spelling. i.e. Color - -&gt; Colour  A: American  B: British  Z: British ize  U: Australian  C: Canadian  (optional, default to A)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        public string GetCaption(int v, string jobId, string captionFormat, string buildUrl = default(string), int? captionWordsMin = default(int?), string captionBySentence = default(string), int? charactersPerCaptionLine = default(int?), string dfxpHeader = default(string), string disallowDangling = default(string), string displayEffectsSpeakerAs = default(string), string displaySpeakerId = default(string), string iwpName = default(string), string elementlistVersion = default(string), string emitSpeakerChangeTokensAs = default(string), string forceCase = default(string), string includeDfxpMetadata = default(string), int? layoutTargetCaptionLengthMs = default(int?), string lineBreakOnSentence = default(string), string lineEndingFormat = default(string), int? linesPerCaption = default(int?), string maskProfanity = default(string), int? maximumCaptionDuration = default(int?), int? mergeGapInterval = default(int?), int? minimumCaptionLengthMs = default(int?), int? minimumGapBetweenCaptionsMs = default(int?), string qtSeamless = default(string), string removeDisfluencies = default(string), List<string> removeSoundsList = default(List<string>), string removeSoundReferences = default(string), string replaceSlang = default(string), int? silenceMaxMs = default(int?), string singleSpeakerPerCaption = default(string), List<string> soundBoundaries = default(List<string>), int? soundThreshold = default(int?), string soundTokensByCaption = default(string), string soundTokensByLine = default(string), List<string> soundTokensByCaptionList = default(List<string>), List<string> soundTokensByLineList = default(List<string>), string speakerOnNewLine = default(string), string srtFormat = default(string), string stripSquareBrackets = default(string), string utf8Mark = default(string), string replaceEnglishSpelling = default(string), int operationIndex = 0)
        {
            cielo24.Client.ApiResponse<string> localVarResponse = GetCaptionWithHttpInfo(v, jobId, captionFormat, buildUrl, captionWordsMin, captionBySentence, charactersPerCaptionLine, dfxpHeader, disallowDangling, displayEffectsSpeakerAs, displaySpeakerId, iwpName, elementlistVersion, emitSpeakerChangeTokensAs, forceCase, includeDfxpMetadata, layoutTargetCaptionLengthMs, lineBreakOnSentence, lineEndingFormat, linesPerCaption, maskProfanity, maximumCaptionDuration, mergeGapInterval, minimumCaptionLengthMs, minimumGapBetweenCaptionsMs, qtSeamless, removeDisfluencies, removeSoundsList, removeSoundReferences, replaceSlang, silenceMaxMs, singleSpeakerPerCaption, soundBoundaries, soundThreshold, soundTokensByCaption, soundTokensByLine, soundTokensByCaptionList, soundTokensByLineList, speakerOnNewLine, srtFormat, stripSquareBrackets, utf8Mark, replaceEnglishSpelling);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get the caption file for a job. The job must have completed transcription before a caption can be downloaded.
        /// </summary>
        /// <exception cref="cielo24.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v"></param>
        /// <param name="jobId"></param>
        /// <param name="captionFormat"></param>
        /// <param name="buildUrl">Rather than returning the file, return a permanent URL to the file. (optional, default to false)</param>
        /// <param name="captionWordsMin">Minimum number of words allowed in a caption. (optional, default to 1)</param>
        /// <param name="captionBySentence">When true, puts each sentence into its own caption. When false, more than one sentence may appear in a single caption. (optional, default to true)</param>
        /// <param name="charactersPerCaptionLine">Maximum number of characters to be displayed on each caption line. (optional, default to 42)</param>
        /// <param name="dfxpHeader">Allows you to specify a custom header for your DFXP caption file. The header should be the entire contents of the header including the opening and closing tags. Ignored if caption_format does not equal DFXP. (optional, default to &quot;&quot;)</param>
        /// <param name="disallowDangling">Will prevent captions from having the last word in a sentence start a new line. Last words will ALWAYS be kept on the same line, even if it breaks the characters_per_caption_line option. (optional, default to false)</param>
        /// <param name="displayEffectsSpeakerAs">Determines what speaker name should used for sound effects. (optional, default to &quot;Effects&quot;)</param>
        /// <param name="displaySpeakerId">Determines the way speakers are identified in the captions. Choose \&quot;no\&quot; to not display speaker identities at all: \&quot;&gt;&gt; example\&quot; Choose \&quot;number\&quot; to display only the speaker number: \&quot;&gt;&gt; Speaker 1: example\&quot; Choose \&quot;name\&quot; to display the speaker name: \&quot;&gt;&gt; John Doe: example\&quot;. If you choose \&quot;name\&quot;, the speaker number will be displayed if the name is not available. (optional, default to name)</param>
        /// <param name="iwpName">The named version of element list to generate the transcript from. If not specified, the transcript will be generated from the latest version. (optional)</param>
        /// <param name="elementlistVersion">The version of element list to generate the captions from. If not specified, the caption will be generated from the latest version. (ISO 8601 Date String) (optional, default to &quot;&quot;)</param>
        /// <param name="emitSpeakerChangeTokensAs">Determine what characters to use to denote speaker changes. (optional, default to &quot;&gt;&gt;&quot;)</param>
        /// <param name="forceCase">Force the contents of the captions to be all UPPER or lower case. If blank, the case of the captions is not changed. (optional)</param>
        /// <param name="includeDfxpMetadata">When true, and the caption format requested is DFXP, the jobs name, ID and language will be added to the DFXP metadata header. When false, these data are omitted from the header. Ignored if caption_format does not equal DFXP. (optional, default to true)</param>
        /// <param name="layoutTargetCaptionLengthMs">Captions generated will, on average, be this duration. However, they may vary significantly based on other parameters you set. (optional, default to 5000)</param>
        /// <param name="lineBreakOnSentence">Inserts a line break in between sentences that are in the same caption. (optional, default to false)</param>
        /// <param name="lineEndingFormat">Determine the end of line (EOL) character to use for the captions. (optional, default to UNIX)</param>
        /// <param name="linesPerCaption">Number of lines to be displayed for each caption. (optional, default to 2)</param>
        /// <param name="maskProfanity">Replace profanity with asterisks. (optional, default to false)</param>
        /// <param name="maximumCaptionDuration">No captions longer than this (in milliseconds) will be produced. If not specified, there is no maximum. (optional)</param>
        /// <param name="mergeGapInterval">Captions with a gap between them that is smaller than this (in milliseconds) will have their start and/or end times changed so there is no time gap between the captions. (optional, default to 1000)</param>
        /// <param name="minimumCaptionLengthMs">Extends the duration of short captions to the this minimum length. Additional time is taken from later caption blocks to meet this minimum time. (optional)</param>
        /// <param name="minimumGapBetweenCaptionsMs">Adds a minimum time between captions such as there will always be some time between captions where no text is displayed. When captions are very close together, time will be removed from the caption duration to make the gap. (optional)</param>
        /// <param name="qtSeamless">Does not put time gaps of any kind between caption blocks. Ignored if caption_format does not equal QT. (optional, default to false)</param>
        /// <param name="removeDisfluencies">Remove verbal disfluencies from the generated transcript. Common disfluencies such as \&quot;um\&quot; and \&quot;ah\&quot; are removed while maintaining appropriate punctuation. (optional, default to true)</param>
        /// <param name="removeSoundsList">A list of sounds to not show in the caption. This is a JSON style list, and should look like [\&quot;MUSIC\&quot;, \&quot;LAUGH\&quot;]. Ignored if remove_sound_references is true. (optional)</param>
        /// <param name="removeSoundReferences">Remove ALL non-verbal sound and noise references from the generated transcript. Sounds and unidentified noises are depicted in the caption as [SOUND], [COUGH] and [NOISE]. If this parameter is set, these identifiers are omitted from the caption. (optional, default to true)</param>
        /// <param name="replaceSlang">Replace common slang terms from the generated transcript. Common replacements are \&quot;want to\&quot; for \&quot;wanna\&quot;, \&quot;going to\&quot; for \&quot;gonna\&quot;, etc. (optional, default to false)</param>
        /// <param name="silenceMaxMs">If there is a interval of silence in the middle of a sentence longer than this, then the caption will be split. (optional, default to 2000)</param>
        /// <param name="singleSpeakerPerCaption">When true, puts each speaker into its own caption. When false, more than one speaker may appear in a single caption. (optional, default to true)</param>
        /// <param name="soundBoundaries">Specifies the characters to surround sound references with. The default will generate sound references that look like this: [MUSIC]. (optional)</param>
        /// <param name="soundThreshold">Sound references that are longer than this threshold will be made their own caption entirely, and will not have any text included with them. If not set, Sound references will be included back to back with text no matter the duration of the sound. (optional)</param>
        /// <param name="soundTokensByCaption">If true, all sound references will always be in their own caption. If false, more than one sound reference may appear in a single caption. (optional, default to false)</param>
        /// <param name="soundTokensByLine">If true, all sound references will always be in their own line. If false, more than one sound reference may appear in a single line. (optional, default to false)</param>
        /// <param name="soundTokensByCaptionList">If non-empty, the specified sound references will always be in their own caption. If empty, more than one sound reference may appear in a single caption. Ignored if sound_tokens_by_caption is true. (optional)</param>
        /// <param name="soundTokensByLineList">If non-empty, the specified sound references will always be in their own line. If empty, more than one sound reference may appear in a single line. Ignored if sound_tokens_by_line is true. (optional)</param>
        /// <param name="speakerOnNewLine">If true, a speaker change will cause a new caption to be made. If false, multiple speakers may appear in a single caption. (optional, default to true)</param>
        /// <param name="srtFormat">If the caption format is SRT, determines what the caption blocks will look like. The default, prints caption blocks that look like this:    1:   00:00:06,060 - -&gt; 00:00:16,060   This is the caption text.  You can alter the caption block by re-arranging or removing the substitution string values, shown enclosed in braces \&quot;{}\&quot; in the default value below. Substitution strings may used more than once if desired. Any text that is not a substitution string will be displayed as written. To add new lines, include a \\n. Note, you may need to escape the \\n with an extra backslash when encoding the request.  (optional, default to &quot;{caption_number:d}\n{start_hour:02d}:{start_minute:02d}:{start_second:02d},{start_millisecond:03d} --&gt;{end_hour:02d}:{end_minute:02d}:{end_second:02d},{end_millisecond:03d}\n{caption_text}\n\n&quot;)</param>
        /// <param name="stripSquareBrackets">Removes all square brackets like &#39;[&#39; or &#39;]&#39; from captions. By default square brackets surround sound references like &#39;[MUSIC]&#39;, but they may exist as part of the caption text as well. (optional, default to false)</param>
        /// <param name="utf8Mark">Adds a utf8 bytemark to the beginning of the caption. This should only be used if the system you are loading the caption files into needs a byte marker. The vast majority of systems do not. (optional, default to false)</param>
        /// <param name="replaceEnglishSpelling">Replaces English spelling with location accurate spelling. i.e. Color - -&gt; Colour  A: American  B: British  Z: British ize  U: Australian  C: Canadian  (optional, default to A)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        public cielo24.Client.ApiResponse<string> GetCaptionWithHttpInfo(int v, string jobId, string captionFormat, string buildUrl = default(string), int? captionWordsMin = default(int?), string captionBySentence = default(string), int? charactersPerCaptionLine = default(int?), string dfxpHeader = default(string), string disallowDangling = default(string), string displayEffectsSpeakerAs = default(string), string displaySpeakerId = default(string), string iwpName = default(string), string elementlistVersion = default(string), string emitSpeakerChangeTokensAs = default(string), string forceCase = default(string), string includeDfxpMetadata = default(string), int? layoutTargetCaptionLengthMs = default(int?), string lineBreakOnSentence = default(string), string lineEndingFormat = default(string), int? linesPerCaption = default(int?), string maskProfanity = default(string), int? maximumCaptionDuration = default(int?), int? mergeGapInterval = default(int?), int? minimumCaptionLengthMs = default(int?), int? minimumGapBetweenCaptionsMs = default(int?), string qtSeamless = default(string), string removeDisfluencies = default(string), List<string> removeSoundsList = default(List<string>), string removeSoundReferences = default(string), string replaceSlang = default(string), int? silenceMaxMs = default(int?), string singleSpeakerPerCaption = default(string), List<string> soundBoundaries = default(List<string>), int? soundThreshold = default(int?), string soundTokensByCaption = default(string), string soundTokensByLine = default(string), List<string> soundTokensByCaptionList = default(List<string>), List<string> soundTokensByLineList = default(List<string>), string speakerOnNewLine = default(string), string srtFormat = default(string), string stripSquareBrackets = default(string), string utf8Mark = default(string), string replaceEnglishSpelling = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'jobId' is set
            if (jobId == null)
            {
                throw new cielo24.Client.ApiException(400, "Missing required parameter 'jobId' when calling JobApi->GetCaption");
            }

            // verify the required parameter 'captionFormat' is set
            if (captionFormat == null)
            {
                throw new cielo24.Client.ApiException(400, "Missing required parameter 'captionFormat' when calling JobApi->GetCaption");
            }

            cielo24.Client.RequestOptions localVarRequestOptions = new cielo24.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json"
            };

            var localVarContentType = cielo24.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cielo24.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "v", v));
            localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "job_id", jobId));
            localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "caption_format", captionFormat));
            if (buildUrl != null)
            {
                localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "build_url", buildUrl));
            }
            if (captionWordsMin != null)
            {
                localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "caption_words_min", captionWordsMin));
            }
            if (captionBySentence != null)
            {
                localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "caption_by_sentence", captionBySentence));
            }
            if (charactersPerCaptionLine != null)
            {
                localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "characters_per_caption_line", charactersPerCaptionLine));
            }
            if (dfxpHeader != null)
            {
                localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "dfxp_header", dfxpHeader));
            }
            if (disallowDangling != null)
            {
                localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "disallow_dangling", disallowDangling));
            }
            if (displayEffectsSpeakerAs != null)
            {
                localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "display_effects_speaker_as", displayEffectsSpeakerAs));
            }
            if (displaySpeakerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "display_speaker_id", displaySpeakerId));
            }
            if (iwpName != null)
            {
                localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "iwp_name", iwpName));
            }
            if (elementlistVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "elementlist_version", elementlistVersion));
            }
            if (emitSpeakerChangeTokensAs != null)
            {
                localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "emit_speaker_change_tokens_as", emitSpeakerChangeTokensAs));
            }
            if (forceCase != null)
            {
                localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "force_case", forceCase));
            }
            if (includeDfxpMetadata != null)
            {
                localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "include_dfxp_metadata", includeDfxpMetadata));
            }
            if (layoutTargetCaptionLengthMs != null)
            {
                localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "layout_target_caption_length_ms", layoutTargetCaptionLengthMs));
            }
            if (lineBreakOnSentence != null)
            {
                localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "line_break_on_sentence", lineBreakOnSentence));
            }
            if (lineEndingFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "line_ending_format", lineEndingFormat));
            }
            if (linesPerCaption != null)
            {
                localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "lines_per_caption", linesPerCaption));
            }
            if (maskProfanity != null)
            {
                localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "mask_profanity", maskProfanity));
            }
            if (maximumCaptionDuration != null)
            {
                localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "maximum_caption_duration", maximumCaptionDuration));
            }
            if (mergeGapInterval != null)
            {
                localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "merge_gap_interval", mergeGapInterval));
            }
            if (minimumCaptionLengthMs != null)
            {
                localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "minimum_caption_length_ms", minimumCaptionLengthMs));
            }
            if (minimumGapBetweenCaptionsMs != null)
            {
                localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "minimum_gap_between_captions_ms", minimumGapBetweenCaptionsMs));
            }
            if (qtSeamless != null)
            {
                localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "qt_seamless", qtSeamless));
            }
            if (removeDisfluencies != null)
            {
                localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "remove_disfluencies", removeDisfluencies));
            }
            if (removeSoundsList != null)
            {
                localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("multi", "remove_sounds_list", removeSoundsList));
            }
            if (removeSoundReferences != null)
            {
                localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "remove_sound_references", removeSoundReferences));
            }
            if (replaceSlang != null)
            {
                localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "replace_slang", replaceSlang));
            }
            if (silenceMaxMs != null)
            {
                localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "silence_max_ms", silenceMaxMs));
            }
            if (singleSpeakerPerCaption != null)
            {
                localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "single_speaker_per_caption", singleSpeakerPerCaption));
            }
            if (soundBoundaries != null)
            {
                localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("multi", "sound_boundaries", soundBoundaries));
            }
            if (soundThreshold != null)
            {
                localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "sound_threshold", soundThreshold));
            }
            if (soundTokensByCaption != null)
            {
                localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "sound_tokens_by_caption", soundTokensByCaption));
            }
            if (soundTokensByLine != null)
            {
                localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "sound_tokens_by_line", soundTokensByLine));
            }
            if (soundTokensByCaptionList != null)
            {
                localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("multi", "sound_tokens_by_caption_list", soundTokensByCaptionList));
            }
            if (soundTokensByLineList != null)
            {
                localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("multi", "sound_tokens_by_line_list", soundTokensByLineList));
            }
            if (speakerOnNewLine != null)
            {
                localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "speaker_on_new_line", speakerOnNewLine));
            }
            if (srtFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "srt_format", srtFormat));
            }
            if (stripSquareBrackets != null)
            {
                localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "strip_square_brackets", stripSquareBrackets));
            }
            if (utf8Mark != null)
            {
                localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "utf8_mark", utf8Mark));
            }
            if (replaceEnglishSpelling != null)
            {
                localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "replace_english_spelling", replaceEnglishSpelling));
            }

            localVarRequestOptions.Operation = "JobApi.GetCaption";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_token")))
            {
                localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "api_token", this.Configuration.GetApiKeyWithPrefix("api_token")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<string>("/job/get_caption", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCaption", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get the caption file for a job. The job must have completed transcription before a caption can be downloaded.
        /// </summary>
        /// <exception cref="cielo24.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v"></param>
        /// <param name="jobId"></param>
        /// <param name="captionFormat"></param>
        /// <param name="buildUrl">Rather than returning the file, return a permanent URL to the file. (optional, default to false)</param>
        /// <param name="captionWordsMin">Minimum number of words allowed in a caption. (optional, default to 1)</param>
        /// <param name="captionBySentence">When true, puts each sentence into its own caption. When false, more than one sentence may appear in a single caption. (optional, default to true)</param>
        /// <param name="charactersPerCaptionLine">Maximum number of characters to be displayed on each caption line. (optional, default to 42)</param>
        /// <param name="dfxpHeader">Allows you to specify a custom header for your DFXP caption file. The header should be the entire contents of the header including the opening and closing tags. Ignored if caption_format does not equal DFXP. (optional, default to &quot;&quot;)</param>
        /// <param name="disallowDangling">Will prevent captions from having the last word in a sentence start a new line. Last words will ALWAYS be kept on the same line, even if it breaks the characters_per_caption_line option. (optional, default to false)</param>
        /// <param name="displayEffectsSpeakerAs">Determines what speaker name should used for sound effects. (optional, default to &quot;Effects&quot;)</param>
        /// <param name="displaySpeakerId">Determines the way speakers are identified in the captions. Choose \&quot;no\&quot; to not display speaker identities at all: \&quot;&gt;&gt; example\&quot; Choose \&quot;number\&quot; to display only the speaker number: \&quot;&gt;&gt; Speaker 1: example\&quot; Choose \&quot;name\&quot; to display the speaker name: \&quot;&gt;&gt; John Doe: example\&quot;. If you choose \&quot;name\&quot;, the speaker number will be displayed if the name is not available. (optional, default to name)</param>
        /// <param name="iwpName">The named version of element list to generate the transcript from. If not specified, the transcript will be generated from the latest version. (optional)</param>
        /// <param name="elementlistVersion">The version of element list to generate the captions from. If not specified, the caption will be generated from the latest version. (ISO 8601 Date String) (optional, default to &quot;&quot;)</param>
        /// <param name="emitSpeakerChangeTokensAs">Determine what characters to use to denote speaker changes. (optional, default to &quot;&gt;&gt;&quot;)</param>
        /// <param name="forceCase">Force the contents of the captions to be all UPPER or lower case. If blank, the case of the captions is not changed. (optional)</param>
        /// <param name="includeDfxpMetadata">When true, and the caption format requested is DFXP, the jobs name, ID and language will be added to the DFXP metadata header. When false, these data are omitted from the header. Ignored if caption_format does not equal DFXP. (optional, default to true)</param>
        /// <param name="layoutTargetCaptionLengthMs">Captions generated will, on average, be this duration. However, they may vary significantly based on other parameters you set. (optional, default to 5000)</param>
        /// <param name="lineBreakOnSentence">Inserts a line break in between sentences that are in the same caption. (optional, default to false)</param>
        /// <param name="lineEndingFormat">Determine the end of line (EOL) character to use for the captions. (optional, default to UNIX)</param>
        /// <param name="linesPerCaption">Number of lines to be displayed for each caption. (optional, default to 2)</param>
        /// <param name="maskProfanity">Replace profanity with asterisks. (optional, default to false)</param>
        /// <param name="maximumCaptionDuration">No captions longer than this (in milliseconds) will be produced. If not specified, there is no maximum. (optional)</param>
        /// <param name="mergeGapInterval">Captions with a gap between them that is smaller than this (in milliseconds) will have their start and/or end times changed so there is no time gap between the captions. (optional, default to 1000)</param>
        /// <param name="minimumCaptionLengthMs">Extends the duration of short captions to the this minimum length. Additional time is taken from later caption blocks to meet this minimum time. (optional)</param>
        /// <param name="minimumGapBetweenCaptionsMs">Adds a minimum time between captions such as there will always be some time between captions where no text is displayed. When captions are very close together, time will be removed from the caption duration to make the gap. (optional)</param>
        /// <param name="qtSeamless">Does not put time gaps of any kind between caption blocks. Ignored if caption_format does not equal QT. (optional, default to false)</param>
        /// <param name="removeDisfluencies">Remove verbal disfluencies from the generated transcript. Common disfluencies such as \&quot;um\&quot; and \&quot;ah\&quot; are removed while maintaining appropriate punctuation. (optional, default to true)</param>
        /// <param name="removeSoundsList">A list of sounds to not show in the caption. This is a JSON style list, and should look like [\&quot;MUSIC\&quot;, \&quot;LAUGH\&quot;]. Ignored if remove_sound_references is true. (optional)</param>
        /// <param name="removeSoundReferences">Remove ALL non-verbal sound and noise references from the generated transcript. Sounds and unidentified noises are depicted in the caption as [SOUND], [COUGH] and [NOISE]. If this parameter is set, these identifiers are omitted from the caption. (optional, default to true)</param>
        /// <param name="replaceSlang">Replace common slang terms from the generated transcript. Common replacements are \&quot;want to\&quot; for \&quot;wanna\&quot;, \&quot;going to\&quot; for \&quot;gonna\&quot;, etc. (optional, default to false)</param>
        /// <param name="silenceMaxMs">If there is a interval of silence in the middle of a sentence longer than this, then the caption will be split. (optional, default to 2000)</param>
        /// <param name="singleSpeakerPerCaption">When true, puts each speaker into its own caption. When false, more than one speaker may appear in a single caption. (optional, default to true)</param>
        /// <param name="soundBoundaries">Specifies the characters to surround sound references with. The default will generate sound references that look like this: [MUSIC]. (optional)</param>
        /// <param name="soundThreshold">Sound references that are longer than this threshold will be made their own caption entirely, and will not have any text included with them. If not set, Sound references will be included back to back with text no matter the duration of the sound. (optional)</param>
        /// <param name="soundTokensByCaption">If true, all sound references will always be in their own caption. If false, more than one sound reference may appear in a single caption. (optional, default to false)</param>
        /// <param name="soundTokensByLine">If true, all sound references will always be in their own line. If false, more than one sound reference may appear in a single line. (optional, default to false)</param>
        /// <param name="soundTokensByCaptionList">If non-empty, the specified sound references will always be in their own caption. If empty, more than one sound reference may appear in a single caption. Ignored if sound_tokens_by_caption is true. (optional)</param>
        /// <param name="soundTokensByLineList">If non-empty, the specified sound references will always be in their own line. If empty, more than one sound reference may appear in a single line. Ignored if sound_tokens_by_line is true. (optional)</param>
        /// <param name="speakerOnNewLine">If true, a speaker change will cause a new caption to be made. If false, multiple speakers may appear in a single caption. (optional, default to true)</param>
        /// <param name="srtFormat">If the caption format is SRT, determines what the caption blocks will look like. The default, prints caption blocks that look like this:    1:   00:00:06,060 - -&gt; 00:00:16,060   This is the caption text.  You can alter the caption block by re-arranging or removing the substitution string values, shown enclosed in braces \&quot;{}\&quot; in the default value below. Substitution strings may used more than once if desired. Any text that is not a substitution string will be displayed as written. To add new lines, include a \\n. Note, you may need to escape the \\n with an extra backslash when encoding the request.  (optional, default to &quot;{caption_number:d}\n{start_hour:02d}:{start_minute:02d}:{start_second:02d},{start_millisecond:03d} --&gt;{end_hour:02d}:{end_minute:02d}:{end_second:02d},{end_millisecond:03d}\n{caption_text}\n\n&quot;)</param>
        /// <param name="stripSquareBrackets">Removes all square brackets like &#39;[&#39; or &#39;]&#39; from captions. By default square brackets surround sound references like &#39;[MUSIC]&#39;, but they may exist as part of the caption text as well. (optional, default to false)</param>
        /// <param name="utf8Mark">Adds a utf8 bytemark to the beginning of the caption. This should only be used if the system you are loading the caption files into needs a byte marker. The vast majority of systems do not. (optional, default to false)</param>
        /// <param name="replaceEnglishSpelling">Replaces English spelling with location accurate spelling. i.e. Color - -&gt; Colour  A: American  B: British  Z: British ize  U: Australian  C: Canadian  (optional, default to A)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> GetCaptionAsync(int v, string jobId, string captionFormat, string buildUrl = default(string), int? captionWordsMin = default(int?), string captionBySentence = default(string), int? charactersPerCaptionLine = default(int?), string dfxpHeader = default(string), string disallowDangling = default(string), string displayEffectsSpeakerAs = default(string), string displaySpeakerId = default(string), string iwpName = default(string), string elementlistVersion = default(string), string emitSpeakerChangeTokensAs = default(string), string forceCase = default(string), string includeDfxpMetadata = default(string), int? layoutTargetCaptionLengthMs = default(int?), string lineBreakOnSentence = default(string), string lineEndingFormat = default(string), int? linesPerCaption = default(int?), string maskProfanity = default(string), int? maximumCaptionDuration = default(int?), int? mergeGapInterval = default(int?), int? minimumCaptionLengthMs = default(int?), int? minimumGapBetweenCaptionsMs = default(int?), string qtSeamless = default(string), string removeDisfluencies = default(string), List<string> removeSoundsList = default(List<string>), string removeSoundReferences = default(string), string replaceSlang = default(string), int? silenceMaxMs = default(int?), string singleSpeakerPerCaption = default(string), List<string> soundBoundaries = default(List<string>), int? soundThreshold = default(int?), string soundTokensByCaption = default(string), string soundTokensByLine = default(string), List<string> soundTokensByCaptionList = default(List<string>), List<string> soundTokensByLineList = default(List<string>), string speakerOnNewLine = default(string), string srtFormat = default(string), string stripSquareBrackets = default(string), string utf8Mark = default(string), string replaceEnglishSpelling = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            cielo24.Client.ApiResponse<string> localVarResponse = await GetCaptionWithHttpInfoAsync(v, jobId, captionFormat, buildUrl, captionWordsMin, captionBySentence, charactersPerCaptionLine, dfxpHeader, disallowDangling, displayEffectsSpeakerAs, displaySpeakerId, iwpName, elementlistVersion, emitSpeakerChangeTokensAs, forceCase, includeDfxpMetadata, layoutTargetCaptionLengthMs, lineBreakOnSentence, lineEndingFormat, linesPerCaption, maskProfanity, maximumCaptionDuration, mergeGapInterval, minimumCaptionLengthMs, minimumGapBetweenCaptionsMs, qtSeamless, removeDisfluencies, removeSoundsList, removeSoundReferences, replaceSlang, silenceMaxMs, singleSpeakerPerCaption, soundBoundaries, soundThreshold, soundTokensByCaption, soundTokensByLine, soundTokensByCaptionList, soundTokensByLineList, speakerOnNewLine, srtFormat, stripSquareBrackets, utf8Mark, replaceEnglishSpelling, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get the caption file for a job. The job must have completed transcription before a caption can be downloaded.
        /// </summary>
        /// <exception cref="cielo24.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v"></param>
        /// <param name="jobId"></param>
        /// <param name="captionFormat"></param>
        /// <param name="buildUrl">Rather than returning the file, return a permanent URL to the file. (optional, default to false)</param>
        /// <param name="captionWordsMin">Minimum number of words allowed in a caption. (optional, default to 1)</param>
        /// <param name="captionBySentence">When true, puts each sentence into its own caption. When false, more than one sentence may appear in a single caption. (optional, default to true)</param>
        /// <param name="charactersPerCaptionLine">Maximum number of characters to be displayed on each caption line. (optional, default to 42)</param>
        /// <param name="dfxpHeader">Allows you to specify a custom header for your DFXP caption file. The header should be the entire contents of the header including the opening and closing tags. Ignored if caption_format does not equal DFXP. (optional, default to &quot;&quot;)</param>
        /// <param name="disallowDangling">Will prevent captions from having the last word in a sentence start a new line. Last words will ALWAYS be kept on the same line, even if it breaks the characters_per_caption_line option. (optional, default to false)</param>
        /// <param name="displayEffectsSpeakerAs">Determines what speaker name should used for sound effects. (optional, default to &quot;Effects&quot;)</param>
        /// <param name="displaySpeakerId">Determines the way speakers are identified in the captions. Choose \&quot;no\&quot; to not display speaker identities at all: \&quot;&gt;&gt; example\&quot; Choose \&quot;number\&quot; to display only the speaker number: \&quot;&gt;&gt; Speaker 1: example\&quot; Choose \&quot;name\&quot; to display the speaker name: \&quot;&gt;&gt; John Doe: example\&quot;. If you choose \&quot;name\&quot;, the speaker number will be displayed if the name is not available. (optional, default to name)</param>
        /// <param name="iwpName">The named version of element list to generate the transcript from. If not specified, the transcript will be generated from the latest version. (optional)</param>
        /// <param name="elementlistVersion">The version of element list to generate the captions from. If not specified, the caption will be generated from the latest version. (ISO 8601 Date String) (optional, default to &quot;&quot;)</param>
        /// <param name="emitSpeakerChangeTokensAs">Determine what characters to use to denote speaker changes. (optional, default to &quot;&gt;&gt;&quot;)</param>
        /// <param name="forceCase">Force the contents of the captions to be all UPPER or lower case. If blank, the case of the captions is not changed. (optional)</param>
        /// <param name="includeDfxpMetadata">When true, and the caption format requested is DFXP, the jobs name, ID and language will be added to the DFXP metadata header. When false, these data are omitted from the header. Ignored if caption_format does not equal DFXP. (optional, default to true)</param>
        /// <param name="layoutTargetCaptionLengthMs">Captions generated will, on average, be this duration. However, they may vary significantly based on other parameters you set. (optional, default to 5000)</param>
        /// <param name="lineBreakOnSentence">Inserts a line break in between sentences that are in the same caption. (optional, default to false)</param>
        /// <param name="lineEndingFormat">Determine the end of line (EOL) character to use for the captions. (optional, default to UNIX)</param>
        /// <param name="linesPerCaption">Number of lines to be displayed for each caption. (optional, default to 2)</param>
        /// <param name="maskProfanity">Replace profanity with asterisks. (optional, default to false)</param>
        /// <param name="maximumCaptionDuration">No captions longer than this (in milliseconds) will be produced. If not specified, there is no maximum. (optional)</param>
        /// <param name="mergeGapInterval">Captions with a gap between them that is smaller than this (in milliseconds) will have their start and/or end times changed so there is no time gap between the captions. (optional, default to 1000)</param>
        /// <param name="minimumCaptionLengthMs">Extends the duration of short captions to the this minimum length. Additional time is taken from later caption blocks to meet this minimum time. (optional)</param>
        /// <param name="minimumGapBetweenCaptionsMs">Adds a minimum time between captions such as there will always be some time between captions where no text is displayed. When captions are very close together, time will be removed from the caption duration to make the gap. (optional)</param>
        /// <param name="qtSeamless">Does not put time gaps of any kind between caption blocks. Ignored if caption_format does not equal QT. (optional, default to false)</param>
        /// <param name="removeDisfluencies">Remove verbal disfluencies from the generated transcript. Common disfluencies such as \&quot;um\&quot; and \&quot;ah\&quot; are removed while maintaining appropriate punctuation. (optional, default to true)</param>
        /// <param name="removeSoundsList">A list of sounds to not show in the caption. This is a JSON style list, and should look like [\&quot;MUSIC\&quot;, \&quot;LAUGH\&quot;]. Ignored if remove_sound_references is true. (optional)</param>
        /// <param name="removeSoundReferences">Remove ALL non-verbal sound and noise references from the generated transcript. Sounds and unidentified noises are depicted in the caption as [SOUND], [COUGH] and [NOISE]. If this parameter is set, these identifiers are omitted from the caption. (optional, default to true)</param>
        /// <param name="replaceSlang">Replace common slang terms from the generated transcript. Common replacements are \&quot;want to\&quot; for \&quot;wanna\&quot;, \&quot;going to\&quot; for \&quot;gonna\&quot;, etc. (optional, default to false)</param>
        /// <param name="silenceMaxMs">If there is a interval of silence in the middle of a sentence longer than this, then the caption will be split. (optional, default to 2000)</param>
        /// <param name="singleSpeakerPerCaption">When true, puts each speaker into its own caption. When false, more than one speaker may appear in a single caption. (optional, default to true)</param>
        /// <param name="soundBoundaries">Specifies the characters to surround sound references with. The default will generate sound references that look like this: [MUSIC]. (optional)</param>
        /// <param name="soundThreshold">Sound references that are longer than this threshold will be made their own caption entirely, and will not have any text included with them. If not set, Sound references will be included back to back with text no matter the duration of the sound. (optional)</param>
        /// <param name="soundTokensByCaption">If true, all sound references will always be in their own caption. If false, more than one sound reference may appear in a single caption. (optional, default to false)</param>
        /// <param name="soundTokensByLine">If true, all sound references will always be in their own line. If false, more than one sound reference may appear in a single line. (optional, default to false)</param>
        /// <param name="soundTokensByCaptionList">If non-empty, the specified sound references will always be in their own caption. If empty, more than one sound reference may appear in a single caption. Ignored if sound_tokens_by_caption is true. (optional)</param>
        /// <param name="soundTokensByLineList">If non-empty, the specified sound references will always be in their own line. If empty, more than one sound reference may appear in a single line. Ignored if sound_tokens_by_line is true. (optional)</param>
        /// <param name="speakerOnNewLine">If true, a speaker change will cause a new caption to be made. If false, multiple speakers may appear in a single caption. (optional, default to true)</param>
        /// <param name="srtFormat">If the caption format is SRT, determines what the caption blocks will look like. The default, prints caption blocks that look like this:    1:   00:00:06,060 - -&gt; 00:00:16,060   This is the caption text.  You can alter the caption block by re-arranging or removing the substitution string values, shown enclosed in braces \&quot;{}\&quot; in the default value below. Substitution strings may used more than once if desired. Any text that is not a substitution string will be displayed as written. To add new lines, include a \\n. Note, you may need to escape the \\n with an extra backslash when encoding the request.  (optional, default to &quot;{caption_number:d}\n{start_hour:02d}:{start_minute:02d}:{start_second:02d},{start_millisecond:03d} --&gt;{end_hour:02d}:{end_minute:02d}:{end_second:02d},{end_millisecond:03d}\n{caption_text}\n\n&quot;)</param>
        /// <param name="stripSquareBrackets">Removes all square brackets like &#39;[&#39; or &#39;]&#39; from captions. By default square brackets surround sound references like &#39;[MUSIC]&#39;, but they may exist as part of the caption text as well. (optional, default to false)</param>
        /// <param name="utf8Mark">Adds a utf8 bytemark to the beginning of the caption. This should only be used if the system you are loading the caption files into needs a byte marker. The vast majority of systems do not. (optional, default to false)</param>
        /// <param name="replaceEnglishSpelling">Replaces English spelling with location accurate spelling. i.e. Color - -&gt; Colour  A: American  B: British  Z: British ize  U: Australian  C: Canadian  (optional, default to A)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<cielo24.Client.ApiResponse<string>> GetCaptionWithHttpInfoAsync(int v, string jobId, string captionFormat, string buildUrl = default(string), int? captionWordsMin = default(int?), string captionBySentence = default(string), int? charactersPerCaptionLine = default(int?), string dfxpHeader = default(string), string disallowDangling = default(string), string displayEffectsSpeakerAs = default(string), string displaySpeakerId = default(string), string iwpName = default(string), string elementlistVersion = default(string), string emitSpeakerChangeTokensAs = default(string), string forceCase = default(string), string includeDfxpMetadata = default(string), int? layoutTargetCaptionLengthMs = default(int?), string lineBreakOnSentence = default(string), string lineEndingFormat = default(string), int? linesPerCaption = default(int?), string maskProfanity = default(string), int? maximumCaptionDuration = default(int?), int? mergeGapInterval = default(int?), int? minimumCaptionLengthMs = default(int?), int? minimumGapBetweenCaptionsMs = default(int?), string qtSeamless = default(string), string removeDisfluencies = default(string), List<string> removeSoundsList = default(List<string>), string removeSoundReferences = default(string), string replaceSlang = default(string), int? silenceMaxMs = default(int?), string singleSpeakerPerCaption = default(string), List<string> soundBoundaries = default(List<string>), int? soundThreshold = default(int?), string soundTokensByCaption = default(string), string soundTokensByLine = default(string), List<string> soundTokensByCaptionList = default(List<string>), List<string> soundTokensByLineList = default(List<string>), string speakerOnNewLine = default(string), string srtFormat = default(string), string stripSquareBrackets = default(string), string utf8Mark = default(string), string replaceEnglishSpelling = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'jobId' is set
            if (jobId == null)
            {
                throw new cielo24.Client.ApiException(400, "Missing required parameter 'jobId' when calling JobApi->GetCaption");
            }

            // verify the required parameter 'captionFormat' is set
            if (captionFormat == null)
            {
                throw new cielo24.Client.ApiException(400, "Missing required parameter 'captionFormat' when calling JobApi->GetCaption");
            }


            cielo24.Client.RequestOptions localVarRequestOptions = new cielo24.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json"
            };

            var localVarContentType = cielo24.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cielo24.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "v", v));
            localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "job_id", jobId));
            localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "caption_format", captionFormat));
            if (buildUrl != null)
            {
                localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "build_url", buildUrl));
            }
            if (captionWordsMin != null)
            {
                localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "caption_words_min", captionWordsMin));
            }
            if (captionBySentence != null)
            {
                localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "caption_by_sentence", captionBySentence));
            }
            if (charactersPerCaptionLine != null)
            {
                localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "characters_per_caption_line", charactersPerCaptionLine));
            }
            if (dfxpHeader != null)
            {
                localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "dfxp_header", dfxpHeader));
            }
            if (disallowDangling != null)
            {
                localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "disallow_dangling", disallowDangling));
            }
            if (displayEffectsSpeakerAs != null)
            {
                localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "display_effects_speaker_as", displayEffectsSpeakerAs));
            }
            if (displaySpeakerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "display_speaker_id", displaySpeakerId));
            }
            if (iwpName != null)
            {
                localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "iwp_name", iwpName));
            }
            if (elementlistVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "elementlist_version", elementlistVersion));
            }
            if (emitSpeakerChangeTokensAs != null)
            {
                localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "emit_speaker_change_tokens_as", emitSpeakerChangeTokensAs));
            }
            if (forceCase != null)
            {
                localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "force_case", forceCase));
            }
            if (includeDfxpMetadata != null)
            {
                localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "include_dfxp_metadata", includeDfxpMetadata));
            }
            if (layoutTargetCaptionLengthMs != null)
            {
                localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "layout_target_caption_length_ms", layoutTargetCaptionLengthMs));
            }
            if (lineBreakOnSentence != null)
            {
                localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "line_break_on_sentence", lineBreakOnSentence));
            }
            if (lineEndingFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "line_ending_format", lineEndingFormat));
            }
            if (linesPerCaption != null)
            {
                localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "lines_per_caption", linesPerCaption));
            }
            if (maskProfanity != null)
            {
                localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "mask_profanity", maskProfanity));
            }
            if (maximumCaptionDuration != null)
            {
                localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "maximum_caption_duration", maximumCaptionDuration));
            }
            if (mergeGapInterval != null)
            {
                localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "merge_gap_interval", mergeGapInterval));
            }
            if (minimumCaptionLengthMs != null)
            {
                localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "minimum_caption_length_ms", minimumCaptionLengthMs));
            }
            if (minimumGapBetweenCaptionsMs != null)
            {
                localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "minimum_gap_between_captions_ms", minimumGapBetweenCaptionsMs));
            }
            if (qtSeamless != null)
            {
                localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "qt_seamless", qtSeamless));
            }
            if (removeDisfluencies != null)
            {
                localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "remove_disfluencies", removeDisfluencies));
            }
            if (removeSoundsList != null)
            {
                localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("multi", "remove_sounds_list", removeSoundsList));
            }
            if (removeSoundReferences != null)
            {
                localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "remove_sound_references", removeSoundReferences));
            }
            if (replaceSlang != null)
            {
                localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "replace_slang", replaceSlang));
            }
            if (silenceMaxMs != null)
            {
                localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "silence_max_ms", silenceMaxMs));
            }
            if (singleSpeakerPerCaption != null)
            {
                localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "single_speaker_per_caption", singleSpeakerPerCaption));
            }
            if (soundBoundaries != null)
            {
                localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("multi", "sound_boundaries", soundBoundaries));
            }
            if (soundThreshold != null)
            {
                localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "sound_threshold", soundThreshold));
            }
            if (soundTokensByCaption != null)
            {
                localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "sound_tokens_by_caption", soundTokensByCaption));
            }
            if (soundTokensByLine != null)
            {
                localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "sound_tokens_by_line", soundTokensByLine));
            }
            if (soundTokensByCaptionList != null)
            {
                localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("multi", "sound_tokens_by_caption_list", soundTokensByCaptionList));
            }
            if (soundTokensByLineList != null)
            {
                localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("multi", "sound_tokens_by_line_list", soundTokensByLineList));
            }
            if (speakerOnNewLine != null)
            {
                localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "speaker_on_new_line", speakerOnNewLine));
            }
            if (srtFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "srt_format", srtFormat));
            }
            if (stripSquareBrackets != null)
            {
                localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "strip_square_brackets", stripSquareBrackets));
            }
            if (utf8Mark != null)
            {
                localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "utf8_mark", utf8Mark));
            }
            if (replaceEnglishSpelling != null)
            {
                localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "replace_english_spelling", replaceEnglishSpelling));
            }

            localVarRequestOptions.Operation = "JobApi.GetCaption";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_token")))
            {
                localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "api_token", this.Configuration.GetApiKeyWithPrefix("api_token")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/job/get_caption", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCaption", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cielo24.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v"></param>
        /// <param name="jobId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>JobInfoResponse</returns>
        public JobInfoResponse JobInfo(int v, string jobId, int operationIndex = 0)
        {
            cielo24.Client.ApiResponse<JobInfoResponse> localVarResponse = JobInfoWithHttpInfo(v, jobId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cielo24.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v"></param>
        /// <param name="jobId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of JobInfoResponse</returns>
        public cielo24.Client.ApiResponse<JobInfoResponse> JobInfoWithHttpInfo(int v, string jobId, int operationIndex = 0)
        {
            // verify the required parameter 'jobId' is set
            if (jobId == null)
            {
                throw new cielo24.Client.ApiException(400, "Missing required parameter 'jobId' when calling JobApi->JobInfo");
            }

            cielo24.Client.RequestOptions localVarRequestOptions = new cielo24.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cielo24.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cielo24.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "v", v));
            localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "job_id", jobId));

            localVarRequestOptions.Operation = "JobApi.JobInfo";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_token")))
            {
                localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "api_token", this.Configuration.GetApiKeyWithPrefix("api_token")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<JobInfoResponse>("/job/info", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("JobInfo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cielo24.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v"></param>
        /// <param name="jobId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JobInfoResponse</returns>
        public async System.Threading.Tasks.Task<JobInfoResponse> JobInfoAsync(int v, string jobId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            cielo24.Client.ApiResponse<JobInfoResponse> localVarResponse = await JobInfoWithHttpInfoAsync(v, jobId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cielo24.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v"></param>
        /// <param name="jobId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JobInfoResponse)</returns>
        public async System.Threading.Tasks.Task<cielo24.Client.ApiResponse<JobInfoResponse>> JobInfoWithHttpInfoAsync(int v, string jobId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'jobId' is set
            if (jobId == null)
            {
                throw new cielo24.Client.ApiException(400, "Missing required parameter 'jobId' when calling JobApi->JobInfo");
            }


            cielo24.Client.RequestOptions localVarRequestOptions = new cielo24.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cielo24.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cielo24.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "v", v));
            localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "job_id", jobId));

            localVarRequestOptions.Operation = "JobApi.JobInfo";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_token")))
            {
                localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "api_token", this.Configuration.GetApiKeyWithPrefix("api_token")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<JobInfoResponse>("/job/info", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("JobInfo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Create a new job. A job is a container into which you can upload media and request that transcription be performed. Creating a job is prerequisite for virtually all other methods.
        /// </summary>
        /// <exception cref="cielo24.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v"></param>
        /// <param name="newJobBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>NewJobResponse</returns>
        public NewJobResponse NewJob(int v, NewJobBody newJobBody, int operationIndex = 0)
        {
            cielo24.Client.ApiResponse<NewJobResponse> localVarResponse = NewJobWithHttpInfo(v, newJobBody);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Create a new job. A job is a container into which you can upload media and request that transcription be performed. Creating a job is prerequisite for virtually all other methods.
        /// </summary>
        /// <exception cref="cielo24.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v"></param>
        /// <param name="newJobBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of NewJobResponse</returns>
        public cielo24.Client.ApiResponse<NewJobResponse> NewJobWithHttpInfo(int v, NewJobBody newJobBody, int operationIndex = 0)
        {
            // verify the required parameter 'newJobBody' is set
            if (newJobBody == null)
            {
                throw new cielo24.Client.ApiException(400, "Missing required parameter 'newJobBody' when calling JobApi->NewJob");
            }

            cielo24.Client.RequestOptions localVarRequestOptions = new cielo24.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cielo24.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cielo24.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "v", v));
            localVarRequestOptions.Data = newJobBody;

            localVarRequestOptions.Operation = "JobApi.NewJob";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_token")))
            {
                localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "api_token", this.Configuration.GetApiKeyWithPrefix("api_token")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<NewJobResponse>("/job/new", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NewJob", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Create a new job. A job is a container into which you can upload media and request that transcription be performed. Creating a job is prerequisite for virtually all other methods.
        /// </summary>
        /// <exception cref="cielo24.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v"></param>
        /// <param name="newJobBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NewJobResponse</returns>
        public async System.Threading.Tasks.Task<NewJobResponse> NewJobAsync(int v, NewJobBody newJobBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            cielo24.Client.ApiResponse<NewJobResponse> localVarResponse = await NewJobWithHttpInfoAsync(v, newJobBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Create a new job. A job is a container into which you can upload media and request that transcription be performed. Creating a job is prerequisite for virtually all other methods.
        /// </summary>
        /// <exception cref="cielo24.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v"></param>
        /// <param name="newJobBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NewJobResponse)</returns>
        public async System.Threading.Tasks.Task<cielo24.Client.ApiResponse<NewJobResponse>> NewJobWithHttpInfoAsync(int v, NewJobBody newJobBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'newJobBody' is set
            if (newJobBody == null)
            {
                throw new cielo24.Client.ApiException(400, "Missing required parameter 'newJobBody' when calling JobApi->NewJob");
            }


            cielo24.Client.RequestOptions localVarRequestOptions = new cielo24.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cielo24.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cielo24.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "v", v));
            localVarRequestOptions.Data = newJobBody;

            localVarRequestOptions.Operation = "JobApi.NewJob";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_token")))
            {
                localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "api_token", this.Configuration.GetApiKeyWithPrefix("api_token")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<NewJobResponse>("/job/new", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NewJob", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Request that transcription be performed on the specified job. A callback URL, if specified, will be called when the transcription is complete. See [callback documentation](https://cielo24.readthedocs.io/en/latest/basics.html#callbacks-label) for details.
        /// </summary>
        /// <exception cref="cielo24.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v"></param>
        /// <param name="performTranscriptionBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PerformTranscriptionResponse</returns>
        public PerformTranscriptionResponse PerformTranscription(int v, PerformTranscriptionBody performTranscriptionBody, int operationIndex = 0)
        {
            cielo24.Client.ApiResponse<PerformTranscriptionResponse> localVarResponse = PerformTranscriptionWithHttpInfo(v, performTranscriptionBody);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Request that transcription be performed on the specified job. A callback URL, if specified, will be called when the transcription is complete. See [callback documentation](https://cielo24.readthedocs.io/en/latest/basics.html#callbacks-label) for details.
        /// </summary>
        /// <exception cref="cielo24.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v"></param>
        /// <param name="performTranscriptionBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PerformTranscriptionResponse</returns>
        public cielo24.Client.ApiResponse<PerformTranscriptionResponse> PerformTranscriptionWithHttpInfo(int v, PerformTranscriptionBody performTranscriptionBody, int operationIndex = 0)
        {
            // verify the required parameter 'performTranscriptionBody' is set
            if (performTranscriptionBody == null)
            {
                throw new cielo24.Client.ApiException(400, "Missing required parameter 'performTranscriptionBody' when calling JobApi->PerformTranscription");
            }

            cielo24.Client.RequestOptions localVarRequestOptions = new cielo24.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cielo24.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cielo24.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "v", v));
            localVarRequestOptions.Data = performTranscriptionBody;

            localVarRequestOptions.Operation = "JobApi.PerformTranscription";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_token")))
            {
                localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "api_token", this.Configuration.GetApiKeyWithPrefix("api_token")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PerformTranscriptionResponse>("/job/perform_transcription", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PerformTranscription", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Request that transcription be performed on the specified job. A callback URL, if specified, will be called when the transcription is complete. See [callback documentation](https://cielo24.readthedocs.io/en/latest/basics.html#callbacks-label) for details.
        /// </summary>
        /// <exception cref="cielo24.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v"></param>
        /// <param name="performTranscriptionBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PerformTranscriptionResponse</returns>
        public async System.Threading.Tasks.Task<PerformTranscriptionResponse> PerformTranscriptionAsync(int v, PerformTranscriptionBody performTranscriptionBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            cielo24.Client.ApiResponse<PerformTranscriptionResponse> localVarResponse = await PerformTranscriptionWithHttpInfoAsync(v, performTranscriptionBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Request that transcription be performed on the specified job. A callback URL, if specified, will be called when the transcription is complete. See [callback documentation](https://cielo24.readthedocs.io/en/latest/basics.html#callbacks-label) for details.
        /// </summary>
        /// <exception cref="cielo24.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v"></param>
        /// <param name="performTranscriptionBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PerformTranscriptionResponse)</returns>
        public async System.Threading.Tasks.Task<cielo24.Client.ApiResponse<PerformTranscriptionResponse>> PerformTranscriptionWithHttpInfoAsync(int v, PerformTranscriptionBody performTranscriptionBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'performTranscriptionBody' is set
            if (performTranscriptionBody == null)
            {
                throw new cielo24.Client.ApiException(400, "Missing required parameter 'performTranscriptionBody' when calling JobApi->PerformTranscription");
            }


            cielo24.Client.RequestOptions localVarRequestOptions = new cielo24.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cielo24.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cielo24.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "v", v));
            localVarRequestOptions.Data = performTranscriptionBody;

            localVarRequestOptions.Operation = "JobApi.PerformTranscription";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_token")))
            {
                localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "api_token", this.Configuration.GetApiKeyWithPrefix("api_token")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PerformTranscriptionResponse>("/job/perform_transcription", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PerformTranscription", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Request that orders a new Translation language for a video that has been previously Transcribed and/or Translated. The New Job ID and job target language will be returned upon completion.
        /// </summary>
        /// <exception cref="cielo24.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v"></param>
        /// <param name="jobId"></param>
        /// <param name="targetLanguages">The language(s) being ordered (Any RFC 5646 language code) separated by comma (,)</param>
        /// <param name="approveUplevel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PerformTranslationResponse</returns>
        public PerformTranslationResponse PerformTranslation(int v, string jobId, string targetLanguages, string approveUplevel = default(string), int operationIndex = 0)
        {
            cielo24.Client.ApiResponse<PerformTranslationResponse> localVarResponse = PerformTranslationWithHttpInfo(v, jobId, targetLanguages, approveUplevel);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Request that orders a new Translation language for a video that has been previously Transcribed and/or Translated. The New Job ID and job target language will be returned upon completion.
        /// </summary>
        /// <exception cref="cielo24.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v"></param>
        /// <param name="jobId"></param>
        /// <param name="targetLanguages">The language(s) being ordered (Any RFC 5646 language code) separated by comma (,)</param>
        /// <param name="approveUplevel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PerformTranslationResponse</returns>
        public cielo24.Client.ApiResponse<PerformTranslationResponse> PerformTranslationWithHttpInfo(int v, string jobId, string targetLanguages, string approveUplevel = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'jobId' is set
            if (jobId == null)
            {
                throw new cielo24.Client.ApiException(400, "Missing required parameter 'jobId' when calling JobApi->PerformTranslation");
            }

            // verify the required parameter 'targetLanguages' is set
            if (targetLanguages == null)
            {
                throw new cielo24.Client.ApiException(400, "Missing required parameter 'targetLanguages' when calling JobApi->PerformTranslation");
            }

            cielo24.Client.RequestOptions localVarRequestOptions = new cielo24.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cielo24.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cielo24.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "v", v));
            localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "job_id", jobId));
            localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "target_languages", targetLanguages));
            if (approveUplevel != null)
            {
                localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "approve_uplevel", approveUplevel));
            }

            localVarRequestOptions.Operation = "JobApi.PerformTranslation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_token")))
            {
                localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "api_token", this.Configuration.GetApiKeyWithPrefix("api_token")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PerformTranslationResponse>("/job/perform_translation", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PerformTranslation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Request that orders a new Translation language for a video that has been previously Transcribed and/or Translated. The New Job ID and job target language will be returned upon completion.
        /// </summary>
        /// <exception cref="cielo24.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v"></param>
        /// <param name="jobId"></param>
        /// <param name="targetLanguages">The language(s) being ordered (Any RFC 5646 language code) separated by comma (,)</param>
        /// <param name="approveUplevel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PerformTranslationResponse</returns>
        public async System.Threading.Tasks.Task<PerformTranslationResponse> PerformTranslationAsync(int v, string jobId, string targetLanguages, string approveUplevel = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            cielo24.Client.ApiResponse<PerformTranslationResponse> localVarResponse = await PerformTranslationWithHttpInfoAsync(v, jobId, targetLanguages, approveUplevel, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Request that orders a new Translation language for a video that has been previously Transcribed and/or Translated. The New Job ID and job target language will be returned upon completion.
        /// </summary>
        /// <exception cref="cielo24.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v"></param>
        /// <param name="jobId"></param>
        /// <param name="targetLanguages">The language(s) being ordered (Any RFC 5646 language code) separated by comma (,)</param>
        /// <param name="approveUplevel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PerformTranslationResponse)</returns>
        public async System.Threading.Tasks.Task<cielo24.Client.ApiResponse<PerformTranslationResponse>> PerformTranslationWithHttpInfoAsync(int v, string jobId, string targetLanguages, string approveUplevel = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'jobId' is set
            if (jobId == null)
            {
                throw new cielo24.Client.ApiException(400, "Missing required parameter 'jobId' when calling JobApi->PerformTranslation");
            }

            // verify the required parameter 'targetLanguages' is set
            if (targetLanguages == null)
            {
                throw new cielo24.Client.ApiException(400, "Missing required parameter 'targetLanguages' when calling JobApi->PerformTranslation");
            }


            cielo24.Client.RequestOptions localVarRequestOptions = new cielo24.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cielo24.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cielo24.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "v", v));
            localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "job_id", jobId));
            localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "target_languages", targetLanguages));
            if (approveUplevel != null)
            {
                localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "approve_uplevel", approveUplevel));
            }

            localVarRequestOptions.Operation = "JobApi.PerformTranslation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_token")))
            {
                localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "api_token", this.Configuration.GetApiKeyWithPrefix("api_token")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PerformTranslationResponse>("/job/perform_translation", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PerformTranslation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
