/*
 * Cielo24
 *
 * The cielo24 Web Services Platform API allows developers to easily integrate transcription, captioning and keyword extraction into their applications without having to use a manual web portal.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: devs@cielo24.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using cielo24.Client;
using cielo24.Model;

namespace cielo24.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAccountApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get Account Settings
        /// </remarks>
        /// <exception cref="cielo24.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object GetSettings(int v, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get Account Settings
        /// </remarks>
        /// <exception cref="cielo24.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetSettingsWithHttpInfo(int v, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Login to the cielo24 API to obtain an API access token for use when calling other methods. Optional arguments may be passed either as HTTP headers or query string parameters. Required arguments must be passed as query string parameters.
        /// </remarks>
        /// <exception cref="cielo24.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v"></param>
        /// <param name="loginBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LoginResponse</returns>
        LoginResponse Login(int v, LoginBody loginBody, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Login to the cielo24 API to obtain an API access token for use when calling other methods. Optional arguments may be passed either as HTTP headers or query string parameters. Required arguments must be passed as query string parameters.
        /// </remarks>
        /// <exception cref="cielo24.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v"></param>
        /// <param name="loginBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LoginResponse</returns>
        ApiResponse<LoginResponse> LoginWithHttpInfo(int v, LoginBody loginBody, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Logout of the current session, invalidating the API token.
        /// </remarks>
        /// <exception cref="cielo24.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void Logout(int v, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Logout of the current session, invalidating the API token.
        /// </remarks>
        /// <exception cref="cielo24.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> LogoutWithHttpInfo(int v, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Test Auth
        /// </remarks>
        /// <exception cref="cielo24.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>VerifyKeyResponse</returns>
        VerifyKeyResponse VerifyKey(int v, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Test Auth
        /// </remarks>
        /// <exception cref="cielo24.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of VerifyKeyResponse</returns>
        ApiResponse<VerifyKeyResponse> VerifyKeyWithHttpInfo(int v, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAccountApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get Account Settings
        /// </remarks>
        /// <exception cref="cielo24.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetSettingsAsync(int v, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get Account Settings
        /// </remarks>
        /// <exception cref="cielo24.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetSettingsWithHttpInfoAsync(int v, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Login to the cielo24 API to obtain an API access token for use when calling other methods. Optional arguments may be passed either as HTTP headers or query string parameters. Required arguments must be passed as query string parameters.
        /// </remarks>
        /// <exception cref="cielo24.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v"></param>
        /// <param name="loginBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LoginResponse</returns>
        System.Threading.Tasks.Task<LoginResponse> LoginAsync(int v, LoginBody loginBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Login to the cielo24 API to obtain an API access token for use when calling other methods. Optional arguments may be passed either as HTTP headers or query string parameters. Required arguments must be passed as query string parameters.
        /// </remarks>
        /// <exception cref="cielo24.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v"></param>
        /// <param name="loginBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LoginResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LoginResponse>> LoginWithHttpInfoAsync(int v, LoginBody loginBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Logout of the current session, invalidating the API token.
        /// </remarks>
        /// <exception cref="cielo24.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task LogoutAsync(int v, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Logout of the current session, invalidating the API token.
        /// </remarks>
        /// <exception cref="cielo24.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> LogoutWithHttpInfoAsync(int v, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Test Auth
        /// </remarks>
        /// <exception cref="cielo24.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of VerifyKeyResponse</returns>
        System.Threading.Tasks.Task<VerifyKeyResponse> VerifyKeyAsync(int v, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Test Auth
        /// </remarks>
        /// <exception cref="cielo24.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (VerifyKeyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerifyKeyResponse>> VerifyKeyWithHttpInfoAsync(int v, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAccountApi : IAccountApiSync, IAccountApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AccountApi : IAccountApi
    {
        private cielo24.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AccountApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AccountApi(string basePath)
        {
            this.Configuration = cielo24.Client.Configuration.MergeConfigurations(
                cielo24.Client.GlobalConfiguration.Instance,
                new cielo24.Client.Configuration { BasePath = basePath }
            );
            this.Client = new cielo24.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new cielo24.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = cielo24.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AccountApi(cielo24.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = cielo24.Client.Configuration.MergeConfigurations(
                cielo24.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new cielo24.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new cielo24.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = cielo24.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public AccountApi(cielo24.Client.ISynchronousClient client, cielo24.Client.IAsynchronousClient asyncClient, cielo24.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = cielo24.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public cielo24.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public cielo24.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public cielo24.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public cielo24.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  Get Account Settings
        /// </summary>
        /// <exception cref="cielo24.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object GetSettings(int v, int operationIndex = 0)
        {
            cielo24.Client.ApiResponse<Object> localVarResponse = GetSettingsWithHttpInfo(v);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get Account Settings
        /// </summary>
        /// <exception cref="cielo24.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public cielo24.Client.ApiResponse<Object> GetSettingsWithHttpInfo(int v, int operationIndex = 0)
        {
            cielo24.Client.RequestOptions localVarRequestOptions = new cielo24.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cielo24.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cielo24.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "v", v));

            localVarRequestOptions.Operation = "AccountApi.GetSettings";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_token")))
            {
                localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "api_token", this.Configuration.GetApiKeyWithPrefix("api_token")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/account/get_settings", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSettings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get Account Settings
        /// </summary>
        /// <exception cref="cielo24.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetSettingsAsync(int v, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            cielo24.Client.ApiResponse<Object> localVarResponse = await GetSettingsWithHttpInfoAsync(v, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get Account Settings
        /// </summary>
        /// <exception cref="cielo24.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<cielo24.Client.ApiResponse<Object>> GetSettingsWithHttpInfoAsync(int v, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            cielo24.Client.RequestOptions localVarRequestOptions = new cielo24.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cielo24.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cielo24.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "v", v));

            localVarRequestOptions.Operation = "AccountApi.GetSettings";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_token")))
            {
                localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "api_token", this.Configuration.GetApiKeyWithPrefix("api_token")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/account/get_settings", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSettings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Login to the cielo24 API to obtain an API access token for use when calling other methods. Optional arguments may be passed either as HTTP headers or query string parameters. Required arguments must be passed as query string parameters.
        /// </summary>
        /// <exception cref="cielo24.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v"></param>
        /// <param name="loginBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LoginResponse</returns>
        public LoginResponse Login(int v, LoginBody loginBody, int operationIndex = 0)
        {
            cielo24.Client.ApiResponse<LoginResponse> localVarResponse = LoginWithHttpInfo(v, loginBody);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Login to the cielo24 API to obtain an API access token for use when calling other methods. Optional arguments may be passed either as HTTP headers or query string parameters. Required arguments must be passed as query string parameters.
        /// </summary>
        /// <exception cref="cielo24.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v"></param>
        /// <param name="loginBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LoginResponse</returns>
        public cielo24.Client.ApiResponse<LoginResponse> LoginWithHttpInfo(int v, LoginBody loginBody, int operationIndex = 0)
        {
            // verify the required parameter 'loginBody' is set
            if (loginBody == null)
            {
                throw new cielo24.Client.ApiException(400, "Missing required parameter 'loginBody' when calling AccountApi->Login");
            }

            cielo24.Client.RequestOptions localVarRequestOptions = new cielo24.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cielo24.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cielo24.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "v", v));
            localVarRequestOptions.Data = loginBody;

            localVarRequestOptions.Operation = "AccountApi.Login";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<LoginResponse>("/account/login", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Login", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Login to the cielo24 API to obtain an API access token for use when calling other methods. Optional arguments may be passed either as HTTP headers or query string parameters. Required arguments must be passed as query string parameters.
        /// </summary>
        /// <exception cref="cielo24.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v"></param>
        /// <param name="loginBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LoginResponse</returns>
        public async System.Threading.Tasks.Task<LoginResponse> LoginAsync(int v, LoginBody loginBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            cielo24.Client.ApiResponse<LoginResponse> localVarResponse = await LoginWithHttpInfoAsync(v, loginBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Login to the cielo24 API to obtain an API access token for use when calling other methods. Optional arguments may be passed either as HTTP headers or query string parameters. Required arguments must be passed as query string parameters.
        /// </summary>
        /// <exception cref="cielo24.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v"></param>
        /// <param name="loginBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LoginResponse)</returns>
        public async System.Threading.Tasks.Task<cielo24.Client.ApiResponse<LoginResponse>> LoginWithHttpInfoAsync(int v, LoginBody loginBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'loginBody' is set
            if (loginBody == null)
            {
                throw new cielo24.Client.ApiException(400, "Missing required parameter 'loginBody' when calling AccountApi->Login");
            }


            cielo24.Client.RequestOptions localVarRequestOptions = new cielo24.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cielo24.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cielo24.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "v", v));
            localVarRequestOptions.Data = loginBody;

            localVarRequestOptions.Operation = "AccountApi.Login";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<LoginResponse>("/account/login", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Login", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Logout of the current session, invalidating the API token.
        /// </summary>
        /// <exception cref="cielo24.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void Logout(int v, int operationIndex = 0)
        {
            LogoutWithHttpInfo(v);
        }

        /// <summary>
        ///  Logout of the current session, invalidating the API token.
        /// </summary>
        /// <exception cref="cielo24.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public cielo24.Client.ApiResponse<Object> LogoutWithHttpInfo(int v, int operationIndex = 0)
        {
            cielo24.Client.RequestOptions localVarRequestOptions = new cielo24.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cielo24.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cielo24.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "v", v));

            localVarRequestOptions.Operation = "AccountApi.Logout";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_token")))
            {
                localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "api_token", this.Configuration.GetApiKeyWithPrefix("api_token")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/account/logout", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Logout", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Logout of the current session, invalidating the API token.
        /// </summary>
        /// <exception cref="cielo24.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task LogoutAsync(int v, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await LogoutWithHttpInfoAsync(v, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  Logout of the current session, invalidating the API token.
        /// </summary>
        /// <exception cref="cielo24.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<cielo24.Client.ApiResponse<Object>> LogoutWithHttpInfoAsync(int v, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            cielo24.Client.RequestOptions localVarRequestOptions = new cielo24.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cielo24.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cielo24.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "v", v));

            localVarRequestOptions.Operation = "AccountApi.Logout";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_token")))
            {
                localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "api_token", this.Configuration.GetApiKeyWithPrefix("api_token")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/account/logout", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Logout", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Test Auth
        /// </summary>
        /// <exception cref="cielo24.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>VerifyKeyResponse</returns>
        public VerifyKeyResponse VerifyKey(int v, int operationIndex = 0)
        {
            cielo24.Client.ApiResponse<VerifyKeyResponse> localVarResponse = VerifyKeyWithHttpInfo(v);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Test Auth
        /// </summary>
        /// <exception cref="cielo24.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of VerifyKeyResponse</returns>
        public cielo24.Client.ApiResponse<VerifyKeyResponse> VerifyKeyWithHttpInfo(int v, int operationIndex = 0)
        {
            cielo24.Client.RequestOptions localVarRequestOptions = new cielo24.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cielo24.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cielo24.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "v", v));

            localVarRequestOptions.Operation = "AccountApi.VerifyKey";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_token")))
            {
                localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "api_token", this.Configuration.GetApiKeyWithPrefix("api_token")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<VerifyKeyResponse>("/account/verify_key", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VerifyKey", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Test Auth
        /// </summary>
        /// <exception cref="cielo24.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of VerifyKeyResponse</returns>
        public async System.Threading.Tasks.Task<VerifyKeyResponse> VerifyKeyAsync(int v, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            cielo24.Client.ApiResponse<VerifyKeyResponse> localVarResponse = await VerifyKeyWithHttpInfoAsync(v, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Test Auth
        /// </summary>
        /// <exception cref="cielo24.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (VerifyKeyResponse)</returns>
        public async System.Threading.Tasks.Task<cielo24.Client.ApiResponse<VerifyKeyResponse>> VerifyKeyWithHttpInfoAsync(int v, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            cielo24.Client.RequestOptions localVarRequestOptions = new cielo24.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cielo24.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cielo24.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "v", v));

            localVarRequestOptions.Operation = "AccountApi.VerifyKey";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_token")))
            {
                localVarRequestOptions.QueryParameters.Add(cielo24.Client.ClientUtils.ParameterToMultiMap("", "api_token", this.Configuration.GetApiKeyWithPrefix("api_token")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<VerifyKeyResponse>("/account/verify_key", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VerifyKey", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
