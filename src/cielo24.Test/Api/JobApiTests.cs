/*
 * Cielo24
 *
 * The cielo24 Web Services Platform API allows developers to easily integrate transcription, captioning and keyword extraction into their applications without having to use a manual web portal.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: devs@cielo24.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using cielo24.Client;
using cielo24.Api;
// uncomment below to import models
//using cielo24.Model;

namespace cielo24.Test.Api
{
    /// <summary>
    ///  Class for testing JobApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class JobApiTests : IDisposable
    {
        private JobApi instance;

        public JobApiTests()
        {
            instance = new JobApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of JobApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' JobApi
            //Assert.IsType<JobApi>(instance);
        }

        /// <summary>
        /// Test AddMediaFile
        /// </summary>
        [Fact]
        public void AddMediaFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int v = null;
            //string jobId = null;
            //int contentLength = null;
            //System.IO.Stream body = null;
            //string isDuplicate = null;
            //var response = instance.AddMediaFile(v, jobId, contentLength, body, isDuplicate);
            //Assert.IsType<AddMediaResponse>(response);
        }

        /// <summary>
        /// Test AddMediaUrl
        /// </summary>
        [Fact]
        public void AddMediaUrlTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int v = null;
            //string jobId = null;
            //string mediaUrl = null;
            //string isDuplicate = null;
            //var response = instance.AddMediaUrl(v, jobId, mediaUrl, isDuplicate);
            //Assert.IsType<AddMediaResponse>(response);
        }

        /// <summary>
        /// Test AuthorizeJob
        /// </summary>
        [Fact]
        public void AuthorizeJobTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int v = null;
            //string jobId = null;
            //instance.AuthorizeJob(v, jobId);
        }

        /// <summary>
        /// Test GetCaption
        /// </summary>
        [Fact]
        public void GetCaptionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int v = null;
            //string jobId = null;
            //string captionFormat = null;
            //string buildUrl = null;
            //int? captionWordsMin = null;
            //string captionBySentence = null;
            //int? charactersPerCaptionLine = null;
            //string dfxpHeader = null;
            //string disallowDangling = null;
            //string displayEffectsSpeakerAs = null;
            //string displaySpeakerId = null;
            //string iwpName = null;
            //string elementlistVersion = null;
            //string emitSpeakerChangeTokensAs = null;
            //string forceCase = null;
            //string includeDfxpMetadata = null;
            //int? layoutTargetCaptionLengthMs = null;
            //string lineBreakOnSentence = null;
            //string lineEndingFormat = null;
            //int? linesPerCaption = null;
            //string maskProfanity = null;
            //int? maximumCaptionDuration = null;
            //int? mergeGapInterval = null;
            //int? minimumCaptionLengthMs = null;
            //int? minimumGapBetweenCaptionsMs = null;
            //string qtSeamless = null;
            //string removeDisfluencies = null;
            //List<string> removeSoundsList = null;
            //string removeSoundReferences = null;
            //string replaceSlang = null;
            //int? silenceMaxMs = null;
            //string singleSpeakerPerCaption = null;
            //List<string> soundBoundaries = null;
            //int? soundThreshold = null;
            //string soundTokensByCaption = null;
            //string soundTokensByLine = null;
            //List<string> soundTokensByCaptionList = null;
            //List<string> soundTokensByLineList = null;
            //string speakerOnNewLine = null;
            //string srtFormat = null;
            //string stripSquareBrackets = null;
            //string utf8Mark = null;
            //string replaceEnglishSpelling = null;
            //var response = instance.GetCaption(v, jobId, captionFormat, buildUrl, captionWordsMin, captionBySentence, charactersPerCaptionLine, dfxpHeader, disallowDangling, displayEffectsSpeakerAs, displaySpeakerId, iwpName, elementlistVersion, emitSpeakerChangeTokensAs, forceCase, includeDfxpMetadata, layoutTargetCaptionLengthMs, lineBreakOnSentence, lineEndingFormat, linesPerCaption, maskProfanity, maximumCaptionDuration, mergeGapInterval, minimumCaptionLengthMs, minimumGapBetweenCaptionsMs, qtSeamless, removeDisfluencies, removeSoundsList, removeSoundReferences, replaceSlang, silenceMaxMs, singleSpeakerPerCaption, soundBoundaries, soundThreshold, soundTokensByCaption, soundTokensByLine, soundTokensByCaptionList, soundTokensByLineList, speakerOnNewLine, srtFormat, stripSquareBrackets, utf8Mark, replaceEnglishSpelling);
            //Assert.IsType<string>(response);
        }

        /// <summary>
        /// Test JobInfo
        /// </summary>
        [Fact]
        public void JobInfoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int v = null;
            //string jobId = null;
            //var response = instance.JobInfo(v, jobId);
            //Assert.IsType<JobInfoResponse>(response);
        }

        /// <summary>
        /// Test NewJob
        /// </summary>
        [Fact]
        public void NewJobTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int v = null;
            //NewJobBody newJobBody = null;
            //var response = instance.NewJob(v, newJobBody);
            //Assert.IsType<NewJobResponse>(response);
        }

        /// <summary>
        /// Test PerformTranscription
        /// </summary>
        [Fact]
        public void PerformTranscriptionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int v = null;
            //PerformTranscriptionBody performTranscriptionBody = null;
            //var response = instance.PerformTranscription(v, performTranscriptionBody);
            //Assert.IsType<PerformTranscriptionResponse>(response);
        }

        /// <summary>
        /// Test PerformTranslation
        /// </summary>
        [Fact]
        public void PerformTranslationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int v = null;
            //string jobId = null;
            //string targetLanguages = null;
            //string approveUplevel = null;
            //var response = instance.PerformTranslation(v, jobId, targetLanguages, approveUplevel);
            //Assert.IsType<PerformTranslationResponse>(response);
        }
    }
}
